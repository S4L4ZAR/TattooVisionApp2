//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// FirebaseAuthData model
    /// </summary>
    [Preserve]
    [DataContract(Name = "FirebaseAuthData")]
    public class FirebaseAuthData
    {
        /// <summary>
        /// Creates an instance of FirebaseAuthData.
        /// </summary>
        /// <param name="firebaseEnabled">firebaseEnabled param</param>
        /// <param name="apiKey">apiKey param</param>
        /// <param name="authDomain">authDomain param</param>
        /// <param name="google">google param</param>
        /// <param name="facebook">facebook param</param>
        /// <param name="apple">apple param</param>
        /// <param name="twitter">twitter param</param>
        /// <param name="microsoft">microsoft param</param>
        /// <param name="email">email param</param>
        /// <param name="saml">saml param</param>
        /// <param name="oidc">oidc param</param>
        [Preserve]
        public FirebaseAuthData(bool firebaseEnabled = default, string apiKey = default, string authDomain = default, FirebaseAuthProvider google = default, FirebaseAuthProvider facebook = default, FirebaseAuthProvider apple = default, FirebaseAuthProvider twitter = default, FirebaseAuthProvider microsoft = default, FirebaseAuthProvider email = default, FirebaseCustomAuthProvider saml = default, FirebaseCustomAuthProvider oidc = default)
        {
            FirebaseEnabled = firebaseEnabled;
            ApiKey = apiKey;
            AuthDomain = authDomain;
            Google = google;
            Facebook = facebook;
            Apple = apple;
            Twitter = twitter;
            Microsoft = microsoft;
            Email = email;
            Saml = saml;
            Oidc = oidc;
        }

        /// <summary>
        /// Parameter firebaseEnabled of FirebaseAuthData
        /// </summary>
        [Preserve]
        [DataMember(Name = "firebaseEnabled", EmitDefaultValue = true)]
        public bool FirebaseEnabled{ get; }
        
        /// <summary>
        /// Parameter apiKey of FirebaseAuthData
        /// </summary>
        [Preserve]
        [DataMember(Name = "apiKey", EmitDefaultValue = false)]
        public string ApiKey{ get; }
        
        /// <summary>
        /// Parameter authDomain of FirebaseAuthData
        /// </summary>
        [Preserve]
        [DataMember(Name = "authDomain", EmitDefaultValue = false)]
        public string AuthDomain{ get; }
        
        /// <summary>
        /// Parameter google of FirebaseAuthData
        /// </summary>
        [Preserve]
        [DataMember(Name = "google", EmitDefaultValue = false)]
        public FirebaseAuthProvider Google{ get; }
        
        /// <summary>
        /// Parameter facebook of FirebaseAuthData
        /// </summary>
        [Preserve]
        [DataMember(Name = "facebook", EmitDefaultValue = false)]
        public FirebaseAuthProvider Facebook{ get; }
        
        /// <summary>
        /// Parameter apple of FirebaseAuthData
        /// </summary>
        [Preserve]
        [DataMember(Name = "apple", EmitDefaultValue = false)]
        public FirebaseAuthProvider Apple{ get; }
        
        /// <summary>
        /// Parameter twitter of FirebaseAuthData
        /// </summary>
        [Preserve]
        [DataMember(Name = "twitter", EmitDefaultValue = false)]
        public FirebaseAuthProvider Twitter{ get; }
        
        /// <summary>
        /// Parameter microsoft of FirebaseAuthData
        /// </summary>
        [Preserve]
        [DataMember(Name = "microsoft", EmitDefaultValue = false)]
        public FirebaseAuthProvider Microsoft{ get; }
        
        /// <summary>
        /// Parameter email of FirebaseAuthData
        /// </summary>
        [Preserve]
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public FirebaseAuthProvider Email{ get; }
        
        /// <summary>
        /// Parameter saml of FirebaseAuthData
        /// </summary>
        [Preserve]
        [DataMember(Name = "saml", EmitDefaultValue = false)]
        public FirebaseCustomAuthProvider Saml{ get; }
        
        /// <summary>
        /// Parameter oidc of FirebaseAuthData
        /// </summary>
        [Preserve]
        [DataMember(Name = "oidc", EmitDefaultValue = false)]
        public FirebaseCustomAuthProvider Oidc{ get; }
    
        /// <summary>
        /// Formats a FirebaseAuthData into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "firebaseEnabled," + FirebaseEnabled.ToString() + ",";
            if (ApiKey != null)
            {
                serializedModel += "apiKey," + ApiKey + ",";
            }
            if (AuthDomain != null)
            {
                serializedModel += "authDomain," + AuthDomain + ",";
            }
            if (Google != null)
            {
                serializedModel += "google," + Google.ToString() + ",";
            }
            if (Facebook != null)
            {
                serializedModel += "facebook," + Facebook.ToString() + ",";
            }
            if (Apple != null)
            {
                serializedModel += "apple," + Apple.ToString() + ",";
            }
            if (Twitter != null)
            {
                serializedModel += "twitter," + Twitter.ToString() + ",";
            }
            if (Microsoft != null)
            {
                serializedModel += "microsoft," + Microsoft.ToString() + ",";
            }
            if (Email != null)
            {
                serializedModel += "email," + Email.ToString() + ",";
            }
            if (Saml != null)
            {
                serializedModel += "saml," + Saml.ToString() + ",";
            }
            if (Oidc != null)
            {
                serializedModel += "oidc," + Oidc.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a FirebaseAuthData as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var firebaseEnabledStringValue = FirebaseEnabled.ToString();
            dictionary.Add("firebaseEnabled", firebaseEnabledStringValue);
            
            if (ApiKey != null)
            {
                var apiKeyStringValue = ApiKey.ToString();
                dictionary.Add("apiKey", apiKeyStringValue);
            }
            
            if (AuthDomain != null)
            {
                var authDomainStringValue = AuthDomain.ToString();
                dictionary.Add("authDomain", authDomainStringValue);
            }
            
            return dictionary;
        }
    }
}
