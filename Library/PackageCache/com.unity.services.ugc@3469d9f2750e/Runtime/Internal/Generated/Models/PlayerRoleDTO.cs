//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// PlayerRoleDTO model
    /// </summary>
    [Preserve]
    [DataContract(Name = "PlayerRoleDTO")]
    internal class PlayerRoleDTO
    {
        /// <summary>
        /// Creates an instance of PlayerRoleDTO.
        /// </summary>
        /// <param name="id">id param</param>
        /// <param name="environmentId">environmentId param</param>
        /// <param name="projectId">projectId param</param>
        /// <param name="name">name param</param>
        /// <param name="canApproveContent">canApproveContent param</param>
        /// <param name="canRejectContent">canRejectContent param</param>
        /// <param name="canViewContentRequiringModeration">canViewContentRequiringModeration param</param>
        /// <param name="canBanPlayer">canBanPlayer param</param>
        /// <param name="canUnbanPlayer">canUnbanPlayer param</param>
        /// <param name="createdAt">createdAt param</param>
        /// <param name="updatedAt">updatedAt param</param>
        /// <param name="environment">environment param</param>
        /// <param name="moderators">moderators param</param>
        [Preserve]
        public PlayerRoleDTO(System.Guid id, string environmentId, string projectId, string name, bool canApproveContent, bool canRejectContent, bool canViewContentRequiringModeration, bool canBanPlayer, bool canUnbanPlayer, DateTime createdAt, DateTime updatedAt, EnvironmentDTO environment = default, List<ModeratorDTO> moderators = default)
        {
            Id = id;
            EnvironmentId = environmentId;
            ProjectId = projectId;
            Name = name;
            CanApproveContent = canApproveContent;
            CanRejectContent = canRejectContent;
            CanViewContentRequiringModeration = canViewContentRequiringModeration;
            CanBanPlayer = canBanPlayer;
            CanUnbanPlayer = canUnbanPlayer;
            Environment = environment;
            Moderators = moderators;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Parameter id of PlayerRoleDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public System.Guid Id{ get; }
        
        /// <summary>
        /// Parameter environmentId of PlayerRoleDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "environmentId", IsRequired = true, EmitDefaultValue = true)]
        public string EnvironmentId{ get; }
        
        /// <summary>
        /// Parameter projectId of PlayerRoleDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId{ get; }
        
        /// <summary>
        /// Parameter name of PlayerRoleDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name{ get; }
        
        /// <summary>
        /// Parameter canApproveContent of PlayerRoleDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "canApproveContent", IsRequired = true, EmitDefaultValue = true)]
        public bool CanApproveContent{ get; }
        
        /// <summary>
        /// Parameter canRejectContent of PlayerRoleDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "canRejectContent", IsRequired = true, EmitDefaultValue = true)]
        public bool CanRejectContent{ get; }
        
        /// <summary>
        /// Parameter canViewContentRequiringModeration of PlayerRoleDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "canViewContentRequiringModeration", IsRequired = true, EmitDefaultValue = true)]
        public bool CanViewContentRequiringModeration{ get; }
        
        /// <summary>
        /// Parameter canBanPlayer of PlayerRoleDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "canBanPlayer", IsRequired = true, EmitDefaultValue = true)]
        public bool CanBanPlayer{ get; }
        
        /// <summary>
        /// Parameter canUnbanPlayer of PlayerRoleDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "canUnbanPlayer", IsRequired = true, EmitDefaultValue = true)]
        public bool CanUnbanPlayer{ get; }
        
        /// <summary>
        /// Parameter environment of PlayerRoleDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "environment", EmitDefaultValue = false)]
        public EnvironmentDTO Environment{ get; }
        
        /// <summary>
        /// Parameter moderators of PlayerRoleDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "moderators", EmitDefaultValue = false)]
        public List<ModeratorDTO> Moderators{ get; }
        
        /// <summary>
        /// Parameter createdAt of PlayerRoleDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt{ get; }
        
        /// <summary>
        /// Parameter updatedAt of PlayerRoleDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt{ get; }
    
        /// <summary>
        /// Formats a PlayerRoleDTO into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Id != null)
            {
                serializedModel += "id," + Id + ",";
            }
            if (EnvironmentId != null)
            {
                serializedModel += "environmentId," + EnvironmentId + ",";
            }
            if (ProjectId != null)
            {
                serializedModel += "projectId," + ProjectId + ",";
            }
            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            serializedModel += "canApproveContent," + CanApproveContent.ToString() + ",";
            serializedModel += "canRejectContent," + CanRejectContent.ToString() + ",";
            serializedModel += "canViewContentRequiringModeration," + CanViewContentRequiringModeration.ToString() + ",";
            serializedModel += "canBanPlayer," + CanBanPlayer.ToString() + ",";
            serializedModel += "canUnbanPlayer," + CanUnbanPlayer.ToString() + ",";
            if (Environment != null)
            {
                serializedModel += "environment," + Environment.ToString() + ",";
            }
            if (Moderators != null)
            {
                serializedModel += "moderators," + Moderators.ToString() + ",";
            }
            if (CreatedAt != null)
            {
                serializedModel += "createdAt," + CreatedAt.ToString() + ",";
            }
            if (UpdatedAt != null)
            {
                serializedModel += "updatedAt," + UpdatedAt.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a PlayerRoleDTO as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Id != null)
            {
                var idStringValue = Id.ToString();
                dictionary.Add("id", idStringValue);
            }
            
            if (EnvironmentId != null)
            {
                var environmentIdStringValue = EnvironmentId.ToString();
                dictionary.Add("environmentId", environmentIdStringValue);
            }
            
            if (ProjectId != null)
            {
                var projectIdStringValue = ProjectId.ToString();
                dictionary.Add("projectId", projectIdStringValue);
            }
            
            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }
            
            var canApproveContentStringValue = CanApproveContent.ToString();
            dictionary.Add("canApproveContent", canApproveContentStringValue);
            
            var canRejectContentStringValue = CanRejectContent.ToString();
            dictionary.Add("canRejectContent", canRejectContentStringValue);
            
            var canViewContentRequiringModerationStringValue = CanViewContentRequiringModeration.ToString();
            dictionary.Add("canViewContentRequiringModeration", canViewContentRequiringModerationStringValue);
            
            var canBanPlayerStringValue = CanBanPlayer.ToString();
            dictionary.Add("canBanPlayer", canBanPlayerStringValue);
            
            var canUnbanPlayerStringValue = CanUnbanPlayer.ToString();
            dictionary.Add("canUnbanPlayer", canUnbanPlayerStringValue);
            
            if (CreatedAt != null)
            {
                var createdAtStringValue = CreatedAt.ToString();
                dictionary.Add("createdAt", createdAtStringValue);
            }
            
            if (UpdatedAt != null)
            {
                var updatedAtStringValue = UpdatedAt.ToString();
                dictionary.Add("updatedAt", updatedAtStringValue);
            }
            
            return dictionary;
        }
    }
}
