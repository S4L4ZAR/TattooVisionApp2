//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// ModeratorDetailedStatisticsDTO model
    /// </summary>
    [Preserve]
    [DataContract(Name = "ModeratorDetailedStatisticsDTO")]
    public class ModeratorDetailedStatisticsDTO
    {
        /// <summary>
        /// Creates an instance of ModeratorDetailedStatisticsDTO.
        /// </summary>
        /// <param name="reviews">reviews param</param>
        /// <param name="approvals">approvals param</param>
        /// <param name="rejections">rejections param</param>
        /// <param name="bannedPlayerCount">bannedPlayerCount param</param>
        /// <param name="updatedAt">updatedAt param</param>
        [Preserve]
        public ModeratorDetailedStatisticsDTO(int reviews = default, int approvals = default, int rejections = default, int bannedPlayerCount = default, DateTime updatedAt = default)
        {
            Reviews = reviews;
            Approvals = approvals;
            Rejections = rejections;
            BannedPlayerCount = bannedPlayerCount;
            UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Parameter reviews of ModeratorDetailedStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "reviews", EmitDefaultValue = false)]
        public int Reviews{ get; }
        
        /// <summary>
        /// Parameter approvals of ModeratorDetailedStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "approvals", EmitDefaultValue = false)]
        public int Approvals{ get; }
        
        /// <summary>
        /// Parameter rejections of ModeratorDetailedStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "rejections", EmitDefaultValue = false)]
        public int Rejections{ get; }
        
        /// <summary>
        /// Parameter bannedPlayerCount of ModeratorDetailedStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "bannedPlayerCount", EmitDefaultValue = false)]
        public int BannedPlayerCount{ get; }
        
        /// <summary>
        /// Parameter updatedAt of ModeratorDetailedStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt{ get; }
    
        /// <summary>
        /// Formats a ModeratorDetailedStatisticsDTO into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "reviews," + Reviews.ToString() + ",";
            serializedModel += "approvals," + Approvals.ToString() + ",";
            serializedModel += "rejections," + Rejections.ToString() + ",";
            serializedModel += "bannedPlayerCount," + BannedPlayerCount.ToString() + ",";
            if (UpdatedAt != null)
            {
                serializedModel += "updatedAt," + UpdatedAt.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a ModeratorDetailedStatisticsDTO as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var reviewsStringValue = Reviews.ToString();
            dictionary.Add("reviews", reviewsStringValue);
            
            var approvalsStringValue = Approvals.ToString();
            dictionary.Add("approvals", approvalsStringValue);
            
            var rejectionsStringValue = Rejections.ToString();
            dictionary.Add("rejections", rejectionsStringValue);
            
            var bannedPlayerCountStringValue = BannedPlayerCount.ToString();
            dictionary.Add("bannedPlayerCount", bannedPlayerCountStringValue);
            
            if (UpdatedAt != null)
            {
                var updatedAtStringValue = UpdatedAt.ToString();
                dictionary.Add("updatedAt", updatedAtStringValue);
            }
            
            return dictionary;
        }
    }
}
