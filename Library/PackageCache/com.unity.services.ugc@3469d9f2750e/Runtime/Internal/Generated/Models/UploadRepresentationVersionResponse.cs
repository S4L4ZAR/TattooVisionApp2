//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// UploadRepresentationVersionResponse model
    /// </summary>
    [Preserve]
    [DataContract(Name = "UploadRepresentationVersionResponse")]
    internal class UploadRepresentationVersionResponse
    {
        /// <summary>
        /// Creates an instance of UploadRepresentationVersionResponse.
        /// </summary>
        /// <param name="uploadUrl">The URL in which to upload the representation output version.  Once the Representation Output version is successfully uploaded,  the Representation Output version will be created in UGC and be  selectable as the current version.</param>
        /// <param name="uploadHeaders">The headers that were used when generating the upload signed url.  Forward these when uploading to the UploadUrl.</param>
        /// <param name="version">Representation Output version Id.</param>
        /// <param name="md5Hash">Md5 hash of the Representation Output file to upload.</param>
        /// <param name="representation">representation param</param>
        /// <param name="representationVersion">representationVersion param</param>
        [Preserve]
        public UploadRepresentationVersionResponse(string uploadUrl = default, Dictionary<string, List<string>> uploadHeaders = default, string version = default, string md5Hash = default, RepresentationDTO representation = default, RepresentationVersionDTO representationVersion = default)
        {
            UploadUrl = uploadUrl;
            UploadHeaders = uploadHeaders;
            Version = version;
            Md5Hash = md5Hash;
            Representation = representation;
            RepresentationVersion = representationVersion;
        }

        /// <summary>
        /// The URL in which to upload the representation output version.  Once the Representation Output version is successfully uploaded,  the Representation Output version will be created in UGC and be  selectable as the current version.
        /// </summary>
        [Preserve]
        [DataMember(Name = "uploadUrl", EmitDefaultValue = false)]
        public string UploadUrl{ get; }
        
        /// <summary>
        /// The headers that were used when generating the upload signed url.  Forward these when uploading to the UploadUrl.
        /// </summary>
        [Preserve]
        [DataMember(Name = "uploadHeaders", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> UploadHeaders{ get; }
        
        /// <summary>
        /// Representation Output version Id.
        /// </summary>
        [Preserve]
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string Version{ get; }
        
        /// <summary>
        /// Md5 hash of the Representation Output file to upload.
        /// </summary>
        [Preserve]
        [DataMember(Name = "md5Hash", EmitDefaultValue = false)]
        public string Md5Hash{ get; }
        
        /// <summary>
        /// Parameter representation of UploadRepresentationVersionResponse
        /// </summary>
        [Preserve]
        [DataMember(Name = "representation", EmitDefaultValue = false)]
        public RepresentationDTO Representation{ get; }
        
        /// <summary>
        /// Parameter representationVersion of UploadRepresentationVersionResponse
        /// </summary>
        [Preserve]
        [DataMember(Name = "representationVersion", EmitDefaultValue = false)]
        public RepresentationVersionDTO RepresentationVersion{ get; }
    
        /// <summary>
        /// Formats a UploadRepresentationVersionResponse into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (UploadUrl != null)
            {
                serializedModel += "uploadUrl," + UploadUrl + ",";
            }
            if (UploadHeaders != null)
            {
                serializedModel += "uploadHeaders," + UploadHeaders.ToString() + ",";
            }
            if (Version != null)
            {
                serializedModel += "version," + Version + ",";
            }
            if (Md5Hash != null)
            {
                serializedModel += "md5Hash," + Md5Hash + ",";
            }
            if (Representation != null)
            {
                serializedModel += "representation," + Representation.ToString() + ",";
            }
            if (RepresentationVersion != null)
            {
                serializedModel += "representationVersion," + RepresentationVersion.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a UploadRepresentationVersionResponse as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (UploadUrl != null)
            {
                var uploadUrlStringValue = UploadUrl.ToString();
                dictionary.Add("uploadUrl", uploadUrlStringValue);
            }
            
            if (UploadHeaders != null)
            {
                var uploadHeadersStringValue = UploadHeaders.ToString();
                dictionary.Add("uploadHeaders", uploadHeadersStringValue);
            }
            
            if (Version != null)
            {
                var versionStringValue = Version.ToString();
                dictionary.Add("version", versionStringValue);
            }
            
            if (Md5Hash != null)
            {
                var md5HashStringValue = Md5Hash.ToString();
                dictionary.Add("md5Hash", md5HashStringValue);
            }
            
            return dictionary;
        }
    }
}
