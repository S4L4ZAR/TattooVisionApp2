//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// Content download statistics
    /// </summary>
    [Preserve]
    [DataContract(Name = "ContentDownloadStats")]
    public class ContentDownloadStats
    {
        /// <summary>
        /// Content download statistics
        /// </summary>
        /// <param name="projectId">Project Id of the Content</param>
        /// <param name="environmentId">Environment Id of the Content</param>
        /// <param name="contentId">Content Id</param>
        /// <param name="allTime">All time Content downloads total</param>
        /// <param name="past365Days">Past 360 days Content downloads count</param>
        /// <param name="past180Days">Past 180 days Content downloads count</param>
        /// <param name="past90Days">Past 90 days Content downloads count</param>
        /// <param name="past60Days">Past 60 days Content downloads count</param>
        /// <param name="past30Days">Past 30 days Content downloads count</param>
        /// <param name="past14Days">Past 14 days Content downloads count</param>
        /// <param name="past7Days">Past 7 days Content downloads count</param>
        /// <param name="pastDay">Past day Content downloads count</param>
        /// <param name="collectedAt">Collection date-time</param>
        [Preserve]
        public ContentDownloadStats(string projectId = default, string environmentId = default, string contentId = default, int? allTime = default, int? past365Days = default, int? past180Days = default, int? past90Days = default, int? past60Days = default, int? past30Days = default, int? past14Days = default, int? past7Days = default, int? pastDay = default, DateTime? collectedAt = default)
        {
            ProjectId = projectId;
            EnvironmentId = environmentId;
            ContentId = contentId;
            AllTime = allTime;
            Past365Days = past365Days;
            Past180Days = past180Days;
            Past90Days = past90Days;
            Past60Days = past60Days;
            Past30Days = past30Days;
            Past14Days = past14Days;
            Past7Days = past7Days;
            PastDay = pastDay;
            CollectedAt = collectedAt;
        }

        /// <summary>
        /// Project Id of the Content
        /// </summary>
        [Preserve]
        [DataMember(Name = "projectId", EmitDefaultValue = false)]
        public string ProjectId{ get; }
        
        /// <summary>
        /// Environment Id of the Content
        /// </summary>
        [Preserve]
        [DataMember(Name = "environmentId", EmitDefaultValue = false)]
        public string EnvironmentId{ get; }
        
        /// <summary>
        /// Content Id
        /// </summary>
        [Preserve]
        [DataMember(Name = "contentId", EmitDefaultValue = false)]
        public string ContentId{ get; }
        
        /// <summary>
        /// All time Content downloads total
        /// </summary>
        [Preserve]
        [DataMember(Name = "allTime", EmitDefaultValue = false)]
        public int? AllTime{ get; }
        
        /// <summary>
        /// Past 360 days Content downloads count
        /// </summary>
        [Preserve]
        [DataMember(Name = "past365Days", EmitDefaultValue = false)]
        public int? Past365Days{ get; }
        
        /// <summary>
        /// Past 180 days Content downloads count
        /// </summary>
        [Preserve]
        [DataMember(Name = "past180Days", EmitDefaultValue = false)]
        public int? Past180Days{ get; }
        
        /// <summary>
        /// Past 90 days Content downloads count
        /// </summary>
        [Preserve]
        [DataMember(Name = "past90Days", EmitDefaultValue = false)]
        public int? Past90Days{ get; }
        
        /// <summary>
        /// Past 60 days Content downloads count
        /// </summary>
        [Preserve]
        [DataMember(Name = "past60Days", EmitDefaultValue = false)]
        public int? Past60Days{ get; }
        
        /// <summary>
        /// Past 30 days Content downloads count
        /// </summary>
        [Preserve]
        [DataMember(Name = "past30Days", EmitDefaultValue = false)]
        public int? Past30Days{ get; }
        
        /// <summary>
        /// Past 14 days Content downloads count
        /// </summary>
        [Preserve]
        [DataMember(Name = "past14Days", EmitDefaultValue = false)]
        public int? Past14Days{ get; }
        
        /// <summary>
        /// Past 7 days Content downloads count
        /// </summary>
        [Preserve]
        [DataMember(Name = "past7Days", EmitDefaultValue = false)]
        public int? Past7Days{ get; }
        
        /// <summary>
        /// Past day Content downloads count
        /// </summary>
        [Preserve]
        [DataMember(Name = "pastDay", EmitDefaultValue = false)]
        public int? PastDay{ get; }
        
        /// <summary>
        /// Collection date-time
        /// </summary>
        [Preserve]
        [DataMember(Name = "collectedAt", EmitDefaultValue = false)]
        public DateTime? CollectedAt{ get; }
    
        /// <summary>
        /// Formats a ContentDownloadStats into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (ProjectId != null)
            {
                serializedModel += "projectId," + ProjectId + ",";
            }
            if (EnvironmentId != null)
            {
                serializedModel += "environmentId," + EnvironmentId + ",";
            }
            if (ContentId != null)
            {
                serializedModel += "contentId," + ContentId + ",";
            }
            if (AllTime != null)
            {
                serializedModel += "allTime," + AllTime.ToString() + ",";
            }
            if (Past365Days != null)
            {
                serializedModel += "past365Days," + Past365Days.ToString() + ",";
            }
            if (Past180Days != null)
            {
                serializedModel += "past180Days," + Past180Days.ToString() + ",";
            }
            if (Past90Days != null)
            {
                serializedModel += "past90Days," + Past90Days.ToString() + ",";
            }
            if (Past60Days != null)
            {
                serializedModel += "past60Days," + Past60Days.ToString() + ",";
            }
            if (Past30Days != null)
            {
                serializedModel += "past30Days," + Past30Days.ToString() + ",";
            }
            if (Past14Days != null)
            {
                serializedModel += "past14Days," + Past14Days.ToString() + ",";
            }
            if (Past7Days != null)
            {
                serializedModel += "past7Days," + Past7Days.ToString() + ",";
            }
            if (PastDay != null)
            {
                serializedModel += "pastDay," + PastDay.ToString() + ",";
            }
            if (CollectedAt != null)
            {
                serializedModel += "collectedAt," + CollectedAt.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a ContentDownloadStats as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (ProjectId != null)
            {
                var projectIdStringValue = ProjectId.ToString();
                dictionary.Add("projectId", projectIdStringValue);
            }
            
            if (EnvironmentId != null)
            {
                var environmentIdStringValue = EnvironmentId.ToString();
                dictionary.Add("environmentId", environmentIdStringValue);
            }
            
            if (ContentId != null)
            {
                var contentIdStringValue = ContentId.ToString();
                dictionary.Add("contentId", contentIdStringValue);
            }
            
            if (AllTime != null)
            {
                var allTimeStringValue = AllTime.ToString();
                dictionary.Add("allTime", allTimeStringValue);
            }
            
            if (Past365Days != null)
            {
                var past365DaysStringValue = Past365Days.ToString();
                dictionary.Add("past365Days", past365DaysStringValue);
            }
            
            if (Past180Days != null)
            {
                var past180DaysStringValue = Past180Days.ToString();
                dictionary.Add("past180Days", past180DaysStringValue);
            }
            
            if (Past90Days != null)
            {
                var past90DaysStringValue = Past90Days.ToString();
                dictionary.Add("past90Days", past90DaysStringValue);
            }
            
            if (Past60Days != null)
            {
                var past60DaysStringValue = Past60Days.ToString();
                dictionary.Add("past60Days", past60DaysStringValue);
            }
            
            if (Past30Days != null)
            {
                var past30DaysStringValue = Past30Days.ToString();
                dictionary.Add("past30Days", past30DaysStringValue);
            }
            
            if (Past14Days != null)
            {
                var past14DaysStringValue = Past14Days.ToString();
                dictionary.Add("past14Days", past14DaysStringValue);
            }
            
            if (Past7Days != null)
            {
                var past7DaysStringValue = Past7Days.ToString();
                dictionary.Add("past7Days", past7DaysStringValue);
            }
            
            if (PastDay != null)
            {
                var pastDayStringValue = PastDay.ToString();
                dictionary.Add("pastDay", pastDayStringValue);
            }
            
            if (CollectedAt != null)
            {
                var collectedAtStringValue = CollectedAt.ToString();
                dictionary.Add("collectedAt", collectedAtStringValue);
            }
            
            return dictionary;
        }
    }
}
