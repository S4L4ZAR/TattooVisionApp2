//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// Create a new content item
    /// </summary>
    [Preserve]
    [DataContract(Name = "NewContentRequest")]
    internal class NewContentRequest
    {
        /// <summary>
        /// Create a new content item
        /// </summary>
        /// <param name="name">Display name of the content</param>
        /// <param name="description">Description of the content</param>
        /// <param name="customId">customId param</param>
        /// <param name="visibility">visibility param</param>
        /// <param name="tagIds">Tag Ids of the content</param>
        /// <param name="contentMd5Hash">A base64 encoded representation of the Content binary  that will be uploaded. Used as a checksum.</param>
        /// <param name="thumbnailMd5Hash">A base64 encoded representation of the Thumbnail file  that will be uploaded. Used as a checksum.</param>
        /// <param name="metadata">metadata param</param>
        [Preserve]
        public NewContentRequest(string name, string description, string customId = default, ContentVisibility visibility = default, List<string> tagIds = default, string contentMd5Hash = default, string thumbnailMd5Hash = default, string metadata = default)
        {
            Name = name;
            Description = description;
            CustomId = customId;
            Visibility = visibility;
            TagIds = tagIds;
            ContentMd5Hash = contentMd5Hash;
            ThumbnailMd5Hash = thumbnailMd5Hash;
            Metadata = metadata;
        }

        /// <summary>
        /// Display name of the content
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name{ get; }
        
        /// <summary>
        /// Description of the content
        /// </summary>
        [Preserve]
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description{ get; }
        
        /// <summary>
        /// Parameter customId of NewContentRequest
        /// </summary>
        [Preserve]
        [DataMember(Name = "customId", EmitDefaultValue = false)]
        public string CustomId{ get; }
        
        /// <summary>
        /// Parameter visibility of NewContentRequest
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "visibility", EmitDefaultValue = false)]
        public ContentVisibility Visibility{ get; }
        
        /// <summary>
        /// Tag Ids of the content
        /// </summary>
        [Preserve]
        [DataMember(Name = "tagIds", EmitDefaultValue = false)]
        public List<string> TagIds{ get; }
        
        /// <summary>
        /// A base64 encoded representation of the Content binary  that will be uploaded. Used as a checksum.
        /// </summary>
        [Preserve]
        [DataMember(Name = "contentMd5Hash", EmitDefaultValue = false)]
        public string ContentMd5Hash{ get; }
        
        /// <summary>
        /// A base64 encoded representation of the Thumbnail file  that will be uploaded. Used as a checksum.
        /// </summary>
        [Preserve]
        [DataMember(Name = "thumbnailMd5Hash", EmitDefaultValue = false)]
        public string ThumbnailMd5Hash{ get; }
        
        /// <summary>
        /// Parameter metadata of NewContentRequest
        /// </summary>
        [Preserve]
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata{ get; }
    
        /// <summary>
        /// Formats a NewContentRequest into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            if (Description != null)
            {
                serializedModel += "description," + Description + ",";
            }
            if (CustomId != null)
            {
                serializedModel += "customId," + CustomId + ",";
            }
            serializedModel += "visibility," + Visibility.ToString() + ",";
            if (TagIds != null)
            {
                serializedModel += "tagIds," + TagIds.ToString() + ",";
            }
            if (ContentMd5Hash != null)
            {
                serializedModel += "contentMd5Hash," + ContentMd5Hash + ",";
            }
            if (ThumbnailMd5Hash != null)
            {
                serializedModel += "thumbnailMd5Hash," + ThumbnailMd5Hash + ",";
            }
            if (Metadata != null)
            {
                serializedModel += "metadata," + Metadata;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a NewContentRequest as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }
            
            if (Description != null)
            {
                var descriptionStringValue = Description.ToString();
                dictionary.Add("description", descriptionStringValue);
            }
            
            if (CustomId != null)
            {
                var customIdStringValue = CustomId.ToString();
                dictionary.Add("customId", customIdStringValue);
            }
            
            var visibilityStringValue = Visibility.ToString();
            dictionary.Add("visibility", visibilityStringValue);
            
            if (TagIds != null)
            {
                var tagIdsStringValue = TagIds.ToString();
                dictionary.Add("tagIds", tagIdsStringValue);
            }
            
            if (ContentMd5Hash != null)
            {
                var contentMd5HashStringValue = ContentMd5Hash.ToString();
                dictionary.Add("contentMd5Hash", contentMd5HashStringValue);
            }
            
            if (ThumbnailMd5Hash != null)
            {
                var thumbnailMd5HashStringValue = ThumbnailMd5Hash.ToString();
                dictionary.Add("thumbnailMd5Hash", thumbnailMd5HashStringValue);
            }
            
            if (Metadata != null)
            {
                var metadataStringValue = Metadata.ToString();
                dictionary.Add("metadata", metadataStringValue);
            }
            
            return dictionary;
        }
    }
}
