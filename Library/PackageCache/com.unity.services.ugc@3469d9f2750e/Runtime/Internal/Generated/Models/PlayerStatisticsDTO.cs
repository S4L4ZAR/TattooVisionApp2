//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// PlayerStatisticsDTO model
    /// </summary>
    [Preserve]
    [DataContract(Name = "PlayerStatisticsDTO")]
    public class PlayerStatisticsDTO
    {
        /// <summary>
        /// Creates an instance of PlayerStatisticsDTO.
        /// </summary>
        /// <param name="projectId">projectId param</param>
        /// <param name="environmentId">environmentId param</param>
        /// <param name="playerId">playerId param</param>
        /// <param name="playerContentCount">playerContentCount param</param>
        /// <param name="approvedPlayerContentCount">approvedPlayerContentCount param</param>
        /// <param name="rejectedPlayerContentCount">rejectedPlayerContentCount param</param>
        /// <param name="needsModerationPlayerContentCount">needsModerationPlayerContentCount param</param>
        /// <param name="subscriptionForPlayerContent">subscriptionForPlayerContent param</param>
        /// <param name="ratingForPlayerContent">ratingForPlayerContent param</param>
        /// <param name="averageRatingForPlayerContent">averageRatingForPlayerContent param</param>
        /// <param name="reportForPlayerContent">reportForPlayerContent param</param>
        /// <param name="playerSubscriptions">playerSubscriptions param</param>
        /// <param name="playerRatings">playerRatings param</param>
        /// <param name="playerAverageRating">playerAverageRating param</param>
        /// <param name="playersReports">playersReports param</param>
        /// <param name="updatedAt">updatedAt param</param>
        /// <param name="contentCount">contentCount param</param>
        /// <param name="approvedContentCount">approvedContentCount param</param>
        /// <param name="rejectedContentCount">rejectedContentCount param</param>
        /// <param name="needsModerationContentCount">needsModerationContentCount param</param>
        /// <param name="subscriptionCount">subscriptionCount param</param>
        /// <param name="ratingsCount">ratingsCount param</param>
        /// <param name="averageContentRating">averageContentRating param</param>
        /// <param name="reportsCount">reportsCount param</param>
        /// <param name="subscriberCount">subscriberCount param</param>
        /// <param name="playerRatingCount">playerRatingCount param</param>
        /// <param name="averageContentRatingGiven">averageContentRatingGiven param</param>
        /// <param name="reportsGivenCount">reportsGivenCount param</param>
        [Preserve]
        public PlayerStatisticsDTO(string projectId = default, string environmentId = default, string playerId = default, int playerContentCount = default, int approvedPlayerContentCount = default, int rejectedPlayerContentCount = default, int needsModerationPlayerContentCount = default, int subscriptionForPlayerContent = default, int ratingForPlayerContent = default, double averageRatingForPlayerContent = default, int reportForPlayerContent = default, int playerSubscriptions = default, int playerRatings = default, double playerAverageRating = default, int playersReports = default, DateTime updatedAt = default, CountStat contentCount = default, CountStat approvedContentCount = default, CountStat rejectedContentCount = default, CountStat needsModerationContentCount = default, CountStat subscriptionCount = default, CountStat ratingsCount = default, AverageStat averageContentRating = default, CountStat reportsCount = default, CountStat subscriberCount = default, CountStat playerRatingCount = default, AverageStat averageContentRatingGiven = default, CountStat reportsGivenCount = default)
        {
            ProjectId = projectId;
            EnvironmentId = environmentId;
            PlayerId = playerId;
            PlayerContentCount = playerContentCount;
            ApprovedPlayerContentCount = approvedPlayerContentCount;
            RejectedPlayerContentCount = rejectedPlayerContentCount;
            NeedsModerationPlayerContentCount = needsModerationPlayerContentCount;
            SubscriptionForPlayerContent = subscriptionForPlayerContent;
            RatingForPlayerContent = ratingForPlayerContent;
            AverageRatingForPlayerContent = averageRatingForPlayerContent;
            ReportForPlayerContent = reportForPlayerContent;
            PlayerSubscriptions = playerSubscriptions;
            PlayerRatings = playerRatings;
            PlayerAverageRating = playerAverageRating;
            PlayersReports = playersReports;
            UpdatedAt = updatedAt;
            ContentCount = contentCount;
            ApprovedContentCount = approvedContentCount;
            RejectedContentCount = rejectedContentCount;
            NeedsModerationContentCount = needsModerationContentCount;
            SubscriptionCount = subscriptionCount;
            RatingsCount = ratingsCount;
            AverageContentRating = averageContentRating;
            ReportsCount = reportsCount;
            SubscriberCount = subscriberCount;
            PlayerRatingCount = playerRatingCount;
            AverageContentRatingGiven = averageContentRatingGiven;
            ReportsGivenCount = reportsGivenCount;
        }

        /// <summary>
        /// Parameter projectId of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "projectId", EmitDefaultValue = false)]
        public string ProjectId{ get; }
        
        /// <summary>
        /// Parameter environmentId of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "environmentId", EmitDefaultValue = false)]
        public string EnvironmentId{ get; }
        
        /// <summary>
        /// Parameter playerId of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "playerId", EmitDefaultValue = false)]
        public string PlayerId{ get; }
        
        /// <summary>
        /// Parameter playerContentCount of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "playerContentCount", EmitDefaultValue = false)]
        public int PlayerContentCount{ get; }
        
        /// <summary>
        /// Parameter approvedPlayerContentCount of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "approvedPlayerContentCount", EmitDefaultValue = false)]
        public int ApprovedPlayerContentCount{ get; }
        
        /// <summary>
        /// Parameter rejectedPlayerContentCount of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "rejectedPlayerContentCount", EmitDefaultValue = false)]
        public int RejectedPlayerContentCount{ get; }
        
        /// <summary>
        /// Parameter needsModerationPlayerContentCount of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "needsModerationPlayerContentCount", EmitDefaultValue = false)]
        public int NeedsModerationPlayerContentCount{ get; }
        
        /// <summary>
        /// Parameter subscriptionForPlayerContent of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "subscriptionForPlayerContent", EmitDefaultValue = false)]
        public int SubscriptionForPlayerContent{ get; }
        
        /// <summary>
        /// Parameter ratingForPlayerContent of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "ratingForPlayerContent", EmitDefaultValue = false)]
        public int RatingForPlayerContent{ get; }
        
        /// <summary>
        /// Parameter averageRatingForPlayerContent of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "averageRatingForPlayerContent", EmitDefaultValue = false)]
        public double AverageRatingForPlayerContent{ get; }
        
        /// <summary>
        /// Parameter reportForPlayerContent of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "reportForPlayerContent", EmitDefaultValue = false)]
        public int ReportForPlayerContent{ get; }
        
        /// <summary>
        /// Parameter playerSubscriptions of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "playerSubscriptions", EmitDefaultValue = false)]
        public int PlayerSubscriptions{ get; }
        
        /// <summary>
        /// Parameter playerRatings of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "playerRatings", EmitDefaultValue = false)]
        public int PlayerRatings{ get; }
        
        /// <summary>
        /// Parameter playerAverageRating of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "playerAverageRating", EmitDefaultValue = false)]
        public double PlayerAverageRating{ get; }
        
        /// <summary>
        /// Parameter playersReports of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "playersReports", EmitDefaultValue = false)]
        public int PlayersReports{ get; }
        
        /// <summary>
        /// Parameter updatedAt of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt{ get; }
        
        /// <summary>
        /// Parameter contentCount of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "contentCount", EmitDefaultValue = false)]
        public CountStat ContentCount{ get; }
        
        /// <summary>
        /// Parameter approvedContentCount of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "approvedContentCount", EmitDefaultValue = false)]
        public CountStat ApprovedContentCount{ get; }
        
        /// <summary>
        /// Parameter rejectedContentCount of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "rejectedContentCount", EmitDefaultValue = false)]
        public CountStat RejectedContentCount{ get; }
        
        /// <summary>
        /// Parameter needsModerationContentCount of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "needsModerationContentCount", EmitDefaultValue = false)]
        public CountStat NeedsModerationContentCount{ get; }
        
        /// <summary>
        /// Parameter subscriptionCount of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "subscriptionCount", EmitDefaultValue = false)]
        public CountStat SubscriptionCount{ get; }
        
        /// <summary>
        /// Parameter ratingsCount of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "ratingsCount", EmitDefaultValue = false)]
        public CountStat RatingsCount{ get; }
        
        /// <summary>
        /// Parameter averageContentRating of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "averageContentRating", EmitDefaultValue = false)]
        public AverageStat AverageContentRating{ get; }
        
        /// <summary>
        /// Parameter reportsCount of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "reportsCount", EmitDefaultValue = false)]
        public CountStat ReportsCount{ get; }
        
        /// <summary>
        /// Parameter subscriberCount of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "subscriberCount", EmitDefaultValue = false)]
        public CountStat SubscriberCount{ get; }
        
        /// <summary>
        /// Parameter playerRatingCount of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "playerRatingCount", EmitDefaultValue = false)]
        public CountStat PlayerRatingCount{ get; }
        
        /// <summary>
        /// Parameter averageContentRatingGiven of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "averageContentRatingGiven", EmitDefaultValue = false)]
        public AverageStat AverageContentRatingGiven{ get; }
        
        /// <summary>
        /// Parameter reportsGivenCount of PlayerStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "reportsGivenCount", EmitDefaultValue = false)]
        public CountStat ReportsGivenCount{ get; }
    
        /// <summary>
        /// Formats a PlayerStatisticsDTO into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (ProjectId != null)
            {
                serializedModel += "projectId," + ProjectId + ",";
            }
            if (EnvironmentId != null)
            {
                serializedModel += "environmentId," + EnvironmentId + ",";
            }
            if (PlayerId != null)
            {
                serializedModel += "playerId," + PlayerId + ",";
            }
            serializedModel += "playerContentCount," + PlayerContentCount.ToString() + ",";
            serializedModel += "approvedPlayerContentCount," + ApprovedPlayerContentCount.ToString() + ",";
            serializedModel += "rejectedPlayerContentCount," + RejectedPlayerContentCount.ToString() + ",";
            serializedModel += "needsModerationPlayerContentCount," + NeedsModerationPlayerContentCount.ToString() + ",";
            serializedModel += "subscriptionForPlayerContent," + SubscriptionForPlayerContent.ToString() + ",";
            serializedModel += "ratingForPlayerContent," + RatingForPlayerContent.ToString() + ",";
            serializedModel += "averageRatingForPlayerContent," + AverageRatingForPlayerContent.ToString() + ",";
            serializedModel += "reportForPlayerContent," + ReportForPlayerContent.ToString() + ",";
            serializedModel += "playerSubscriptions," + PlayerSubscriptions.ToString() + ",";
            serializedModel += "playerRatings," + PlayerRatings.ToString() + ",";
            serializedModel += "playerAverageRating," + PlayerAverageRating.ToString() + ",";
            serializedModel += "playersReports," + PlayersReports.ToString() + ",";
            if (UpdatedAt != null)
            {
                serializedModel += "updatedAt," + UpdatedAt.ToString() + ",";
            }
            if (ContentCount != null)
            {
                serializedModel += "contentCount," + ContentCount.ToString() + ",";
            }
            if (ApprovedContentCount != null)
            {
                serializedModel += "approvedContentCount," + ApprovedContentCount.ToString() + ",";
            }
            if (RejectedContentCount != null)
            {
                serializedModel += "rejectedContentCount," + RejectedContentCount.ToString() + ",";
            }
            if (NeedsModerationContentCount != null)
            {
                serializedModel += "needsModerationContentCount," + NeedsModerationContentCount.ToString() + ",";
            }
            if (SubscriptionCount != null)
            {
                serializedModel += "subscriptionCount," + SubscriptionCount.ToString() + ",";
            }
            if (RatingsCount != null)
            {
                serializedModel += "ratingsCount," + RatingsCount.ToString() + ",";
            }
            if (AverageContentRating != null)
            {
                serializedModel += "averageContentRating," + AverageContentRating.ToString() + ",";
            }
            if (ReportsCount != null)
            {
                serializedModel += "reportsCount," + ReportsCount.ToString() + ",";
            }
            if (SubscriberCount != null)
            {
                serializedModel += "subscriberCount," + SubscriberCount.ToString() + ",";
            }
            if (PlayerRatingCount != null)
            {
                serializedModel += "playerRatingCount," + PlayerRatingCount.ToString() + ",";
            }
            if (AverageContentRatingGiven != null)
            {
                serializedModel += "averageContentRatingGiven," + AverageContentRatingGiven.ToString() + ",";
            }
            if (ReportsGivenCount != null)
            {
                serializedModel += "reportsGivenCount," + ReportsGivenCount.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a PlayerStatisticsDTO as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (ProjectId != null)
            {
                var projectIdStringValue = ProjectId.ToString();
                dictionary.Add("projectId", projectIdStringValue);
            }
            
            if (EnvironmentId != null)
            {
                var environmentIdStringValue = EnvironmentId.ToString();
                dictionary.Add("environmentId", environmentIdStringValue);
            }
            
            if (PlayerId != null)
            {
                var playerIdStringValue = PlayerId.ToString();
                dictionary.Add("playerId", playerIdStringValue);
            }
            
            var playerContentCountStringValue = PlayerContentCount.ToString();
            dictionary.Add("playerContentCount", playerContentCountStringValue);
            
            var approvedPlayerContentCountStringValue = ApprovedPlayerContentCount.ToString();
            dictionary.Add("approvedPlayerContentCount", approvedPlayerContentCountStringValue);
            
            var rejectedPlayerContentCountStringValue = RejectedPlayerContentCount.ToString();
            dictionary.Add("rejectedPlayerContentCount", rejectedPlayerContentCountStringValue);
            
            var needsModerationPlayerContentCountStringValue = NeedsModerationPlayerContentCount.ToString();
            dictionary.Add("needsModerationPlayerContentCount", needsModerationPlayerContentCountStringValue);
            
            var subscriptionForPlayerContentStringValue = SubscriptionForPlayerContent.ToString();
            dictionary.Add("subscriptionForPlayerContent", subscriptionForPlayerContentStringValue);
            
            var ratingForPlayerContentStringValue = RatingForPlayerContent.ToString();
            dictionary.Add("ratingForPlayerContent", ratingForPlayerContentStringValue);
            
            var averageRatingForPlayerContentStringValue = AverageRatingForPlayerContent.ToString();
            dictionary.Add("averageRatingForPlayerContent", averageRatingForPlayerContentStringValue);
            
            var reportForPlayerContentStringValue = ReportForPlayerContent.ToString();
            dictionary.Add("reportForPlayerContent", reportForPlayerContentStringValue);
            
            var playerSubscriptionsStringValue = PlayerSubscriptions.ToString();
            dictionary.Add("playerSubscriptions", playerSubscriptionsStringValue);
            
            var playerRatingsStringValue = PlayerRatings.ToString();
            dictionary.Add("playerRatings", playerRatingsStringValue);
            
            var playerAverageRatingStringValue = PlayerAverageRating.ToString();
            dictionary.Add("playerAverageRating", playerAverageRatingStringValue);
            
            var playersReportsStringValue = PlayersReports.ToString();
            dictionary.Add("playersReports", playersReportsStringValue);
            
            if (UpdatedAt != null)
            {
                var updatedAtStringValue = UpdatedAt.ToString();
                dictionary.Add("updatedAt", updatedAtStringValue);
            }
            
            return dictionary;
        }
    }
}
