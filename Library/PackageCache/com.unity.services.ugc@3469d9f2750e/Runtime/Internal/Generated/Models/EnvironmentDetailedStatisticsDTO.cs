//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// EnvironmentDetailedStatisticsDTO model
    /// </summary>
    [Preserve]
    [DataContract(Name = "EnvironmentDetailedStatisticsDTO")]
    public class EnvironmentDetailedStatisticsDTO
    {
        /// <summary>
        /// Creates an instance of EnvironmentDetailedStatisticsDTO.
        /// </summary>
        /// <param name="contentCount">contentCount param</param>
        /// <param name="downloadedContentCount">downloadedContentCount param</param>
        /// <param name="subscriptionCount">subscriptionCount param</param>
        /// <param name="reportsCount">reportsCount param</param>
        /// <param name="updatedAt">updatedAt param</param>
        [Preserve]
        public EnvironmentDetailedStatisticsDTO(int contentCount = default, int downloadedContentCount = default, int subscriptionCount = default, int reportsCount = default, DateTime updatedAt = default)
        {
            ContentCount = contentCount;
            DownloadedContentCount = downloadedContentCount;
            SubscriptionCount = subscriptionCount;
            ReportsCount = reportsCount;
            UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Parameter contentCount of EnvironmentDetailedStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "contentCount", EmitDefaultValue = false)]
        public int ContentCount{ get; }
        
        /// <summary>
        /// Parameter downloadedContentCount of EnvironmentDetailedStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "downloadedContentCount", EmitDefaultValue = false)]
        public int DownloadedContentCount{ get; }
        
        /// <summary>
        /// Parameter subscriptionCount of EnvironmentDetailedStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "subscriptionCount", EmitDefaultValue = false)]
        public int SubscriptionCount{ get; }
        
        /// <summary>
        /// Parameter reportsCount of EnvironmentDetailedStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "reportsCount", EmitDefaultValue = false)]
        public int ReportsCount{ get; }
        
        /// <summary>
        /// Parameter updatedAt of EnvironmentDetailedStatisticsDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt{ get; }
    
        /// <summary>
        /// Formats a EnvironmentDetailedStatisticsDTO into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "contentCount," + ContentCount.ToString() + ",";
            serializedModel += "downloadedContentCount," + DownloadedContentCount.ToString() + ",";
            serializedModel += "subscriptionCount," + SubscriptionCount.ToString() + ",";
            serializedModel += "reportsCount," + ReportsCount.ToString() + ",";
            if (UpdatedAt != null)
            {
                serializedModel += "updatedAt," + UpdatedAt.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a EnvironmentDetailedStatisticsDTO as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var contentCountStringValue = ContentCount.ToString();
            dictionary.Add("contentCount", contentCountStringValue);
            
            var downloadedContentCountStringValue = DownloadedContentCount.ToString();
            dictionary.Add("downloadedContentCount", downloadedContentCountStringValue);
            
            var subscriptionCountStringValue = SubscriptionCount.ToString();
            dictionary.Add("subscriptionCount", subscriptionCountStringValue);
            
            var reportsCountStringValue = ReportsCount.ToString();
            dictionary.Add("reportsCount", reportsCountStringValue);
            
            if (UpdatedAt != null)
            {
                var updatedAtStringValue = UpdatedAt.ToString();
                dictionary.Add("updatedAt", updatedAtStringValue);
            }
            
            return dictionary;
        }
    }
}
