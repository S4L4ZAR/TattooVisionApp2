//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// BannedPlayerDTO model
    /// </summary>
    [Preserve]
    [DataContract(Name = "BannedPlayerDTO")]
    internal class BannedPlayerDTO
    {
        /// <summary>
        /// Creates an instance of BannedPlayerDTO.
        /// </summary>
        /// <param name="playerId">playerId param</param>
        /// <param name="environmentId">environmentId param</param>
        /// <param name="projectId">projectId param</param>
        /// <param name="moderatorPlayerId">moderatorPlayerId param</param>
        /// <param name="reason">reason param</param>
        /// <param name="createdAt">createdAt param</param>
        /// <param name="environment">environment param</param>
        /// <param name="moderator">moderator param</param>
        /// <param name="playerStatistics">playerStatistics param</param>
        /// <param name="webhookEventName">webhookEventName param</param>
        [Preserve]
        public BannedPlayerDTO(string playerId, string environmentId, string projectId, string moderatorPlayerId, string reason, DateTime createdAt, EnvironmentDTO environment = default, ModeratorDTO moderator = default, PlayerStatisticsDTO playerStatistics = default, string webhookEventName = default)
        {
            PlayerId = playerId;
            EnvironmentId = environmentId;
            ProjectId = projectId;
            ModeratorPlayerId = moderatorPlayerId;
            Environment = environment;
            Moderator = moderator;
            Reason = reason;
            CreatedAt = createdAt;
            PlayerStatistics = playerStatistics;
            WebhookEventName = webhookEventName;
        }

        /// <summary>
        /// Parameter playerId of BannedPlayerDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "playerId", IsRequired = true, EmitDefaultValue = true)]
        public string PlayerId{ get; }
        
        /// <summary>
        /// Parameter environmentId of BannedPlayerDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "environmentId", IsRequired = true, EmitDefaultValue = true)]
        public string EnvironmentId{ get; }
        
        /// <summary>
        /// Parameter projectId of BannedPlayerDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId{ get; }
        
        /// <summary>
        /// Parameter moderatorPlayerId of BannedPlayerDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "moderatorPlayerId", IsRequired = true, EmitDefaultValue = true)]
        public string ModeratorPlayerId{ get; }
        
        /// <summary>
        /// Parameter environment of BannedPlayerDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "environment", EmitDefaultValue = false)]
        public EnvironmentDTO Environment{ get; }
        
        /// <summary>
        /// Parameter moderator of BannedPlayerDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "moderator", EmitDefaultValue = false)]
        public ModeratorDTO Moderator{ get; }
        
        /// <summary>
        /// Parameter reason of BannedPlayerDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public string Reason{ get; }
        
        /// <summary>
        /// Parameter createdAt of BannedPlayerDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt{ get; }
        
        /// <summary>
        /// Parameter playerStatistics of BannedPlayerDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "playerStatistics", EmitDefaultValue = false)]
        public PlayerStatisticsDTO PlayerStatistics{ get; }
        
        /// <summary>
        /// Parameter webhookEventName of BannedPlayerDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "webhookEventName", EmitDefaultValue = false)]
        public string WebhookEventName{ get; }
    
        /// <summary>
        /// Formats a BannedPlayerDTO into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (PlayerId != null)
            {
                serializedModel += "playerId," + PlayerId + ",";
            }
            if (EnvironmentId != null)
            {
                serializedModel += "environmentId," + EnvironmentId + ",";
            }
            if (ProjectId != null)
            {
                serializedModel += "projectId," + ProjectId + ",";
            }
            if (ModeratorPlayerId != null)
            {
                serializedModel += "moderatorPlayerId," + ModeratorPlayerId + ",";
            }
            if (Environment != null)
            {
                serializedModel += "environment," + Environment.ToString() + ",";
            }
            if (Moderator != null)
            {
                serializedModel += "moderator," + Moderator.ToString() + ",";
            }
            if (Reason != null)
            {
                serializedModel += "reason," + Reason + ",";
            }
            if (CreatedAt != null)
            {
                serializedModel += "createdAt," + CreatedAt.ToString() + ",";
            }
            if (PlayerStatistics != null)
            {
                serializedModel += "playerStatistics," + PlayerStatistics.ToString() + ",";
            }
            if (WebhookEventName != null)
            {
                serializedModel += "webhookEventName," + WebhookEventName;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a BannedPlayerDTO as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (PlayerId != null)
            {
                var playerIdStringValue = PlayerId.ToString();
                dictionary.Add("playerId", playerIdStringValue);
            }
            
            if (EnvironmentId != null)
            {
                var environmentIdStringValue = EnvironmentId.ToString();
                dictionary.Add("environmentId", environmentIdStringValue);
            }
            
            if (ProjectId != null)
            {
                var projectIdStringValue = ProjectId.ToString();
                dictionary.Add("projectId", projectIdStringValue);
            }
            
            if (ModeratorPlayerId != null)
            {
                var moderatorPlayerIdStringValue = ModeratorPlayerId.ToString();
                dictionary.Add("moderatorPlayerId", moderatorPlayerIdStringValue);
            }
            
            if (Reason != null)
            {
                var reasonStringValue = Reason.ToString();
                dictionary.Add("reason", reasonStringValue);
            }
            
            if (CreatedAt != null)
            {
                var createdAtStringValue = CreatedAt.ToString();
                dictionary.Add("createdAt", createdAtStringValue);
            }
            
            if (WebhookEventName != null)
            {
                var webhookEventNameStringValue = WebhookEventName.ToString();
                dictionary.Add("webhookEventName", webhookEventNameStringValue);
            }
            
            return dictionary;
        }
    }
}
