//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// ContentModerationAuditLogDTO model
    /// </summary>
    [Preserve]
    [DataContract(Name = "ContentModerationAuditLogDTO")]
    internal class ContentModerationAuditLogDTO
    {
        /// <summary>
        /// Creates an instance of ContentModerationAuditLogDTO.
        /// </summary>
        /// <param name="id">id param</param>
        /// <param name="contentId">contentId param</param>
        /// <param name="projectId">projectId param</param>
        /// <param name="environmentId">environmentId param</param>
        /// <param name="moderatorPlayerId">moderatorPlayerId param</param>
        /// <param name="action">action param</param>
        /// <param name="reason">reason param</param>
        /// <param name="createdAt">createdAt param</param>
        /// <param name="moderator">moderator param</param>
        /// <param name="content">content param</param>
        /// <param name="otherReason">otherReason param</param>
        [Preserve]
        public ContentModerationAuditLogDTO(System.Guid id, string contentId, string projectId, string environmentId, string moderatorPlayerId, ContentModerationAction action, Reason reason, DateTime createdAt, ModeratorDTO moderator = default, ContentDTO content = default, string otherReason = default)
        {
            Id = id;
            ContentId = contentId;
            ProjectId = projectId;
            EnvironmentId = environmentId;
            ModeratorPlayerId = moderatorPlayerId;
            Moderator = moderator;
            Content = content;
            Action = action;
            Reason = reason;
            OtherReason = otherReason;
            CreatedAt = createdAt;
        }

        /// <summary>
        /// Parameter id of ContentModerationAuditLogDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public System.Guid Id{ get; }
        
        /// <summary>
        /// Parameter contentId of ContentModerationAuditLogDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "contentId", IsRequired = true, EmitDefaultValue = true)]
        public string ContentId{ get; }
        
        /// <summary>
        /// Parameter projectId of ContentModerationAuditLogDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId{ get; }
        
        /// <summary>
        /// Parameter environmentId of ContentModerationAuditLogDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "environmentId", IsRequired = true, EmitDefaultValue = true)]
        public string EnvironmentId{ get; }
        
        /// <summary>
        /// Parameter moderatorPlayerId of ContentModerationAuditLogDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "moderatorPlayerId", IsRequired = true, EmitDefaultValue = true)]
        public string ModeratorPlayerId{ get; }
        
        /// <summary>
        /// Parameter moderator of ContentModerationAuditLogDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "moderator", EmitDefaultValue = false)]
        public ModeratorDTO Moderator{ get; }
        
        /// <summary>
        /// Parameter content of ContentModerationAuditLogDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public ContentDTO Content{ get; }
        
        /// <summary>
        /// Parameter action of ContentModerationAuditLogDTO
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "action", IsRequired = true, EmitDefaultValue = true)]
        public ContentModerationAction Action{ get; }
        
        /// <summary>
        /// Parameter reason of ContentModerationAuditLogDTO
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public Reason Reason{ get; }
        
        /// <summary>
        /// Parameter otherReason of ContentModerationAuditLogDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "otherReason", EmitDefaultValue = false)]
        public string OtherReason{ get; }
        
        /// <summary>
        /// Parameter createdAt of ContentModerationAuditLogDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt{ get; }
    
        /// <summary>
        /// Formats a ContentModerationAuditLogDTO into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Id != null)
            {
                serializedModel += "id," + Id + ",";
            }
            if (ContentId != null)
            {
                serializedModel += "contentId," + ContentId + ",";
            }
            if (ProjectId != null)
            {
                serializedModel += "projectId," + ProjectId + ",";
            }
            if (EnvironmentId != null)
            {
                serializedModel += "environmentId," + EnvironmentId + ",";
            }
            if (ModeratorPlayerId != null)
            {
                serializedModel += "moderatorPlayerId," + ModeratorPlayerId + ",";
            }
            if (Moderator != null)
            {
                serializedModel += "moderator," + Moderator.ToString() + ",";
            }
            if (Content != null)
            {
                serializedModel += "content," + Content.ToString() + ",";
            }
            serializedModel += "action," + Action.ToString() + ",";
            serializedModel += "reason," + Reason.ToString() + ",";
            if (OtherReason != null)
            {
                serializedModel += "otherReason," + OtherReason + ",";
            }
            if (CreatedAt != null)
            {
                serializedModel += "createdAt," + CreatedAt.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a ContentModerationAuditLogDTO as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Id != null)
            {
                var idStringValue = Id.ToString();
                dictionary.Add("id", idStringValue);
            }
            
            if (ContentId != null)
            {
                var contentIdStringValue = ContentId.ToString();
                dictionary.Add("contentId", contentIdStringValue);
            }
            
            if (ProjectId != null)
            {
                var projectIdStringValue = ProjectId.ToString();
                dictionary.Add("projectId", projectIdStringValue);
            }
            
            if (EnvironmentId != null)
            {
                var environmentIdStringValue = EnvironmentId.ToString();
                dictionary.Add("environmentId", environmentIdStringValue);
            }
            
            if (ModeratorPlayerId != null)
            {
                var moderatorPlayerIdStringValue = ModeratorPlayerId.ToString();
                dictionary.Add("moderatorPlayerId", moderatorPlayerIdStringValue);
            }
            
            var actionStringValue = Action.ToString();
            dictionary.Add("action", actionStringValue);
            
            var reasonStringValue = Reason.ToString();
            dictionary.Add("reason", reasonStringValue);
            
            if (OtherReason != null)
            {
                var otherReasonStringValue = OtherReason.ToString();
                dictionary.Add("otherReason", otherReasonStringValue);
            }
            
            if (CreatedAt != null)
            {
                var createdAtStringValue = CreatedAt.ToString();
                dictionary.Add("createdAt", createdAtStringValue);
            }
            
            return dictionary;
        }
    }
}
