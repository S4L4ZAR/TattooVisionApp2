//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// EnvironmentDTO model
    /// </summary>
    [Preserve]
    [DataContract(Name = "EnvironmentDTO")]
    internal class EnvironmentDTO
    {
        /// <summary>
        /// Creates an instance of EnvironmentDTO.
        /// </summary>
        /// <param name="id">Environment id</param>
        /// <param name="projectId">Project id</param>
        /// <param name="name">Environment name</param>
        /// <param name="isDefault">Is the default environment for this project</param>
        /// <param name="createdAt">The date the environment was created upstream</param>
        /// <param name="updatedAt">The date the environment was last updated upstream</param>
        /// <param name="archivedAt">The date the environment was archived upstream</param>
        /// <param name="deletedAt">The date the environment was soft deleted upstream</param>
        /// <param name="statistics">statistics param</param>
        [Preserve]
        public EnvironmentDTO(string id, string projectId, string name = default, bool isDefault = default, DateTime createdAt = default, DateTime updatedAt = default, DateTime? archivedAt = default, DateTime? deletedAt = default, EnvironmentStatisticsDTO statistics = default)
        {
            Id = id;
            Name = name;
            ProjectId = projectId;
            IsDefault = isDefault;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            ArchivedAt = archivedAt;
            DeletedAt = deletedAt;
            Statistics = statistics;
        }

        /// <summary>
        /// Environment id
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id{ get; }
        
        /// <summary>
        /// Environment name
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name{ get; }
        
        /// <summary>
        /// Project id
        /// </summary>
        [Preserve]
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId{ get; }
        
        /// <summary>
        /// Is the default environment for this project
        /// </summary>
        [Preserve]
        [DataMember(Name = "isDefault", EmitDefaultValue = true)]
        public bool IsDefault{ get; }
        
        /// <summary>
        /// The date the environment was created upstream
        /// </summary>
        [Preserve]
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt{ get; }
        
        /// <summary>
        /// The date the environment was last updated upstream
        /// </summary>
        [Preserve]
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt{ get; }
        
        /// <summary>
        /// The date the environment was archived upstream
        /// </summary>
        [Preserve]
        [DataMember(Name = "archivedAt", EmitDefaultValue = false)]
        public DateTime? ArchivedAt{ get; }
        
        /// <summary>
        /// The date the environment was soft deleted upstream
        /// </summary>
        [Preserve]
        [DataMember(Name = "deletedAt", EmitDefaultValue = false)]
        public DateTime? DeletedAt{ get; }
        
        /// <summary>
        /// Parameter statistics of EnvironmentDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "statistics", EmitDefaultValue = false)]
        public EnvironmentStatisticsDTO Statistics{ get; }
    
        /// <summary>
        /// Formats a EnvironmentDTO into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Id != null)
            {
                serializedModel += "id," + Id + ",";
            }
            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            if (ProjectId != null)
            {
                serializedModel += "projectId," + ProjectId + ",";
            }
            serializedModel += "isDefault," + IsDefault.ToString() + ",";
            if (CreatedAt != null)
            {
                serializedModel += "createdAt," + CreatedAt.ToString() + ",";
            }
            if (UpdatedAt != null)
            {
                serializedModel += "updatedAt," + UpdatedAt.ToString() + ",";
            }
            if (ArchivedAt != null)
            {
                serializedModel += "archivedAt," + ArchivedAt.ToString() + ",";
            }
            if (DeletedAt != null)
            {
                serializedModel += "deletedAt," + DeletedAt.ToString() + ",";
            }
            if (Statistics != null)
            {
                serializedModel += "statistics," + Statistics.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a EnvironmentDTO as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Id != null)
            {
                var idStringValue = Id.ToString();
                dictionary.Add("id", idStringValue);
            }
            
            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }
            
            if (ProjectId != null)
            {
                var projectIdStringValue = ProjectId.ToString();
                dictionary.Add("projectId", projectIdStringValue);
            }
            
            var isDefaultStringValue = IsDefault.ToString();
            dictionary.Add("isDefault", isDefaultStringValue);
            
            if (CreatedAt != null)
            {
                var createdAtStringValue = CreatedAt.ToString();
                dictionary.Add("createdAt", createdAtStringValue);
            }
            
            if (UpdatedAt != null)
            {
                var updatedAtStringValue = UpdatedAt.ToString();
                dictionary.Add("updatedAt", updatedAtStringValue);
            }
            
            if (ArchivedAt != null)
            {
                var archivedAtStringValue = ArchivedAt.ToString();
                dictionary.Add("archivedAt", archivedAtStringValue);
            }
            
            if (DeletedAt != null)
            {
                var deletedAtStringValue = DeletedAt.ToString();
                dictionary.Add("deletedAt", deletedAtStringValue);
            }
            
            return dictionary;
        }
    }
}
