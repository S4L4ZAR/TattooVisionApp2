//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// Response for getting content info
    /// </summary>
    [Preserve]
    [DataContract(Name = "ContentDTO")]
    internal class ContentDTO
    {
        /// <summary>
        /// Response for getting content info
        /// </summary>
        /// <param name="id">Content item guid</param>
        /// <param name="projectId">Owning project id</param>
        /// <param name="environmentId">Owning environment id</param>
        /// <param name="creatorAccountId">Account id that uploaded content</param>
        /// <param name="name">Display name</param>
        /// <param name="customId">Client supplied id for content</param>
        /// <param name="description">Description</param>
        /// <param name="visibility">visibility param</param>
        /// <param name="moderationStatus">moderationStatus param</param>
        /// <param name="version">Current live version of content</param>
        /// <param name="createdAt">Date content was created</param>
        /// <param name="updatedAt">Date content was last updated</param>
        /// <param name="deletedAt">Date content was soft deleted</param>
        /// <param name="thumbnailUrl">Image url for thumbnail</param>
        /// <param name="downloadUrl">Download url for raw content</param>
        /// <param name="portalUrl">Content portal url</param>
        /// <param name="contentMd5Hash">Md5 hash of the content binary</param>
        /// <param name="thumbnailMd5Hash">Md5 hash of the content thumbnail</param>
        /// <param name="metadata">Content metadata</param>
        /// <param name="tags">Tag Ids</param>
        /// <param name="discoveryTags">Content Discovery Tags</param>
        /// <param name="averageRating">Average user rating</param>
        /// <param name="ratingCount">Number of user ratings</param>
        /// <param name="subscriptionCount">Number of subscriptions</param>
        /// <param name="statistics">statistics param</param>
        /// <param name="isUserSubscribed">User is subscribed</param>
        /// <param name="assetUploadStatus">assetUploadStatus param</param>
        /// <param name="thumbnailUploadStatus">thumbnailUploadStatus param</param>
        /// <param name="webhookEventName">webhookEventName param</param>
        [Preserve]
        public ContentDTO(string id, string projectId, string environmentId, string creatorAccountId, string name = default, string customId = default, string description = default, ContentVisibility visibility = default, ModerationStatus moderationStatus = default, string version = default, DateTime createdAt = default, DateTime updatedAt = default, DateTime? deletedAt = default, string thumbnailUrl = default, string downloadUrl = default, string portalUrl = default, string contentMd5Hash = default, string thumbnailMd5Hash = default, string metadata = default, List<TagDTO> tags = default, List<TagDTO> discoveryTags = default, float? averageRating = default, int? ratingCount = default, int? subscriptionCount = default, ContentStatistics statistics = default, bool isUserSubscribed = default, ContentUploadStatus assetUploadStatus = default, ContentUploadStatus thumbnailUploadStatus = default, string webhookEventName = default)
        {
            Id = id;
            Name = name;
            CustomId = customId;
            Description = description;
            Visibility = visibility;
            ModerationStatus = moderationStatus;
            Version = version;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            DeletedAt = deletedAt;
            ProjectId = projectId;
            EnvironmentId = environmentId;
            CreatorAccountId = creatorAccountId;
            ThumbnailUrl = thumbnailUrl;
            DownloadUrl = downloadUrl;
            PortalUrl = portalUrl;
            ContentMd5Hash = contentMd5Hash;
            ThumbnailMd5Hash = thumbnailMd5Hash;
            Metadata = metadata;
            Tags = tags;
            DiscoveryTags = discoveryTags;
            AverageRating = averageRating;
            RatingCount = ratingCount;
            SubscriptionCount = subscriptionCount;
            Statistics = statistics;
            IsUserSubscribed = isUserSubscribed;
            AssetUploadStatus = assetUploadStatus;
            ThumbnailUploadStatus = thumbnailUploadStatus;
            WebhookEventName = webhookEventName;
        }

        /// <summary>
        /// Content item guid
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id{ get; }
        
        /// <summary>
        /// Display name
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name{ get; }
        
        /// <summary>
        /// Client supplied id for content
        /// </summary>
        [Preserve]
        [DataMember(Name = "customId", EmitDefaultValue = false)]
        public string CustomId{ get; }
        
        /// <summary>
        /// Description
        /// </summary>
        [Preserve]
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description{ get; }
        
        /// <summary>
        /// Parameter visibility of ContentDTO
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "visibility", EmitDefaultValue = false)]
        public ContentVisibility Visibility{ get; }
        
        /// <summary>
        /// Parameter moderationStatus of ContentDTO
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "moderationStatus", EmitDefaultValue = false)]
        public ModerationStatus ModerationStatus{ get; }
        
        /// <summary>
        /// Current live version of content
        /// </summary>
        [Preserve]
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string Version{ get; }
        
        /// <summary>
        /// Date content was created
        /// </summary>
        [Preserve]
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt{ get; }
        
        /// <summary>
        /// Date content was last updated
        /// </summary>
        [Preserve]
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt{ get; }
        
        /// <summary>
        /// Date content was soft deleted
        /// </summary>
        [Preserve]
        [DataMember(Name = "deletedAt", EmitDefaultValue = false)]
        public DateTime? DeletedAt{ get; }
        
        /// <summary>
        /// Owning project id
        /// </summary>
        [Preserve]
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId{ get; }
        
        /// <summary>
        /// Owning environment id
        /// </summary>
        [Preserve]
        [DataMember(Name = "environmentId", IsRequired = true, EmitDefaultValue = true)]
        public string EnvironmentId{ get; }
        
        /// <summary>
        /// Account id that uploaded content
        /// </summary>
        [Preserve]
        [DataMember(Name = "creatorAccountId", IsRequired = true, EmitDefaultValue = true)]
        public string CreatorAccountId{ get; }
        
        /// <summary>
        /// Image url for thumbnail
        /// </summary>
        [Preserve]
        [DataMember(Name = "thumbnailUrl", EmitDefaultValue = false)]
        public string ThumbnailUrl{ get; }
        
        /// <summary>
        /// Download url for raw content
        /// </summary>
        [Preserve]
        [DataMember(Name = "downloadUrl", EmitDefaultValue = false)]
        public string DownloadUrl{ get; }
        
        /// <summary>
        /// Content portal url
        /// </summary>
        [Preserve]
        [DataMember(Name = "portalUrl", EmitDefaultValue = false)]
        public string PortalUrl{ get; }
        
        /// <summary>
        /// Md5 hash of the content binary
        /// </summary>
        [Preserve]
        [DataMember(Name = "contentMd5Hash", EmitDefaultValue = false)]
        public string ContentMd5Hash{ get; }
        
        /// <summary>
        /// Md5 hash of the content thumbnail
        /// </summary>
        [Preserve]
        [DataMember(Name = "thumbnailMd5Hash", EmitDefaultValue = false)]
        public string ThumbnailMd5Hash{ get; }
        
        /// <summary>
        /// Content metadata
        /// </summary>
        [Preserve]
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata{ get; }
        
        /// <summary>
        /// Tag Ids
        /// </summary>
        [Preserve]
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<TagDTO> Tags{ get; }
        
        /// <summary>
        /// Content Discovery Tags
        /// </summary>
        [Preserve]
        [DataMember(Name = "discoveryTags", EmitDefaultValue = false)]
        public List<TagDTO> DiscoveryTags{ get; }
        
        /// <summary>
        /// Average user rating
        /// </summary>
        [Preserve]
        [DataMember(Name = "averageRating", EmitDefaultValue = false)]
        public float? AverageRating{ get; }
        
        /// <summary>
        /// Number of user ratings
        /// </summary>
        [Preserve]
        [DataMember(Name = "ratingCount", EmitDefaultValue = false)]
        public int? RatingCount{ get; }
        
        /// <summary>
        /// Number of subscriptions
        /// </summary>
        [Preserve]
        [DataMember(Name = "subscriptionCount", EmitDefaultValue = false)]
        public int? SubscriptionCount{ get; }
        
        /// <summary>
        /// Parameter statistics of ContentDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "statistics", EmitDefaultValue = false)]
        public ContentStatistics Statistics{ get; }
        
        /// <summary>
        /// User is subscribed
        /// </summary>
        [Preserve]
        [DataMember(Name = "isUserSubscribed", EmitDefaultValue = true)]
        public bool IsUserSubscribed{ get; }
        
        /// <summary>
        /// Parameter assetUploadStatus of ContentDTO
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "assetUploadStatus", EmitDefaultValue = false)]
        public ContentUploadStatus AssetUploadStatus{ get; }
        
        /// <summary>
        /// Parameter thumbnailUploadStatus of ContentDTO
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "thumbnailUploadStatus", EmitDefaultValue = false)]
        public ContentUploadStatus ThumbnailUploadStatus{ get; }
        
        /// <summary>
        /// Parameter webhookEventName of ContentDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "webhookEventName", EmitDefaultValue = false)]
        public string WebhookEventName{ get; }
    
        /// <summary>
        /// Formats a ContentDTO into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Id != null)
            {
                serializedModel += "id," + Id + ",";
            }
            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            if (CustomId != null)
            {
                serializedModel += "customId," + CustomId + ",";
            }
            if (Description != null)
            {
                serializedModel += "description," + Description + ",";
            }
            serializedModel += "visibility," + Visibility.ToString() + ",";
            serializedModel += "moderationStatus," + ModerationStatus.ToString() + ",";
            if (Version != null)
            {
                serializedModel += "version," + Version + ",";
            }
            if (CreatedAt != null)
            {
                serializedModel += "createdAt," + CreatedAt.ToString() + ",";
            }
            if (UpdatedAt != null)
            {
                serializedModel += "updatedAt," + UpdatedAt.ToString() + ",";
            }
            if (DeletedAt != null)
            {
                serializedModel += "deletedAt," + DeletedAt.ToString() + ",";
            }
            if (ProjectId != null)
            {
                serializedModel += "projectId," + ProjectId + ",";
            }
            if (EnvironmentId != null)
            {
                serializedModel += "environmentId," + EnvironmentId + ",";
            }
            if (CreatorAccountId != null)
            {
                serializedModel += "creatorAccountId," + CreatorAccountId + ",";
            }
            if (ThumbnailUrl != null)
            {
                serializedModel += "thumbnailUrl," + ThumbnailUrl + ",";
            }
            if (DownloadUrl != null)
            {
                serializedModel += "downloadUrl," + DownloadUrl + ",";
            }
            if (PortalUrl != null)
            {
                serializedModel += "portalUrl," + PortalUrl + ",";
            }
            if (ContentMd5Hash != null)
            {
                serializedModel += "contentMd5Hash," + ContentMd5Hash + ",";
            }
            if (ThumbnailMd5Hash != null)
            {
                serializedModel += "thumbnailMd5Hash," + ThumbnailMd5Hash + ",";
            }
            if (Metadata != null)
            {
                serializedModel += "metadata," + Metadata + ",";
            }
            if (Tags != null)
            {
                serializedModel += "tags," + Tags.ToString() + ",";
            }
            if (DiscoveryTags != null)
            {
                serializedModel += "discoveryTags," + DiscoveryTags.ToString() + ",";
            }
            if (AverageRating != null)
            {
                serializedModel += "averageRating," + AverageRating.ToString() + ",";
            }
            if (RatingCount != null)
            {
                serializedModel += "ratingCount," + RatingCount.ToString() + ",";
            }
            if (SubscriptionCount != null)
            {
                serializedModel += "subscriptionCount," + SubscriptionCount.ToString() + ",";
            }
            if (Statistics != null)
            {
                serializedModel += "statistics," + Statistics.ToString() + ",";
            }
            serializedModel += "isUserSubscribed," + IsUserSubscribed.ToString() + ",";
            serializedModel += "assetUploadStatus," + AssetUploadStatus.ToString() + ",";
            serializedModel += "thumbnailUploadStatus," + ThumbnailUploadStatus.ToString() + ",";
            if (WebhookEventName != null)
            {
                serializedModel += "webhookEventName," + WebhookEventName;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a ContentDTO as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Id != null)
            {
                var idStringValue = Id.ToString();
                dictionary.Add("id", idStringValue);
            }
            
            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }
            
            if (CustomId != null)
            {
                var customIdStringValue = CustomId.ToString();
                dictionary.Add("customId", customIdStringValue);
            }
            
            if (Description != null)
            {
                var descriptionStringValue = Description.ToString();
                dictionary.Add("description", descriptionStringValue);
            }
            
            var visibilityStringValue = Visibility.ToString();
            dictionary.Add("visibility", visibilityStringValue);
            
            var moderationStatusStringValue = ModerationStatus.ToString();
            dictionary.Add("moderationStatus", moderationStatusStringValue);
            
            if (Version != null)
            {
                var versionStringValue = Version.ToString();
                dictionary.Add("version", versionStringValue);
            }
            
            if (CreatedAt != null)
            {
                var createdAtStringValue = CreatedAt.ToString();
                dictionary.Add("createdAt", createdAtStringValue);
            }
            
            if (UpdatedAt != null)
            {
                var updatedAtStringValue = UpdatedAt.ToString();
                dictionary.Add("updatedAt", updatedAtStringValue);
            }
            
            if (DeletedAt != null)
            {
                var deletedAtStringValue = DeletedAt.ToString();
                dictionary.Add("deletedAt", deletedAtStringValue);
            }
            
            if (ProjectId != null)
            {
                var projectIdStringValue = ProjectId.ToString();
                dictionary.Add("projectId", projectIdStringValue);
            }
            
            if (EnvironmentId != null)
            {
                var environmentIdStringValue = EnvironmentId.ToString();
                dictionary.Add("environmentId", environmentIdStringValue);
            }
            
            if (CreatorAccountId != null)
            {
                var creatorAccountIdStringValue = CreatorAccountId.ToString();
                dictionary.Add("creatorAccountId", creatorAccountIdStringValue);
            }
            
            if (ThumbnailUrl != null)
            {
                var thumbnailUrlStringValue = ThumbnailUrl.ToString();
                dictionary.Add("thumbnailUrl", thumbnailUrlStringValue);
            }
            
            if (DownloadUrl != null)
            {
                var downloadUrlStringValue = DownloadUrl.ToString();
                dictionary.Add("downloadUrl", downloadUrlStringValue);
            }
            
            if (PortalUrl != null)
            {
                var portalUrlStringValue = PortalUrl.ToString();
                dictionary.Add("portalUrl", portalUrlStringValue);
            }
            
            if (ContentMd5Hash != null)
            {
                var contentMd5HashStringValue = ContentMd5Hash.ToString();
                dictionary.Add("contentMd5Hash", contentMd5HashStringValue);
            }
            
            if (ThumbnailMd5Hash != null)
            {
                var thumbnailMd5HashStringValue = ThumbnailMd5Hash.ToString();
                dictionary.Add("thumbnailMd5Hash", thumbnailMd5HashStringValue);
            }
            
            if (Metadata != null)
            {
                var metadataStringValue = Metadata.ToString();
                dictionary.Add("metadata", metadataStringValue);
            }
            
            if (AverageRating != null)
            {
                var averageRatingStringValue = AverageRating.ToString();
                dictionary.Add("averageRating", averageRatingStringValue);
            }
            
            if (RatingCount != null)
            {
                var ratingCountStringValue = RatingCount.ToString();
                dictionary.Add("ratingCount", ratingCountStringValue);
            }
            
            if (SubscriptionCount != null)
            {
                var subscriptionCountStringValue = SubscriptionCount.ToString();
                dictionary.Add("subscriptionCount", subscriptionCountStringValue);
            }
            
            var isUserSubscribedStringValue = IsUserSubscribed.ToString();
            dictionary.Add("isUserSubscribed", isUserSubscribedStringValue);
            
            var assetUploadStatusStringValue = AssetUploadStatus.ToString();
            dictionary.Add("assetUploadStatus", assetUploadStatusStringValue);
            
            var thumbnailUploadStatusStringValue = ThumbnailUploadStatus.ToString();
            dictionary.Add("thumbnailUploadStatus", thumbnailUploadStatusStringValue);
            
            if (WebhookEventName != null)
            {
                var webhookEventNameStringValue = WebhookEventName.ToString();
                dictionary.Add("webhookEventName", webhookEventNameStringValue);
            }
            
            return dictionary;
        }
    }
}
