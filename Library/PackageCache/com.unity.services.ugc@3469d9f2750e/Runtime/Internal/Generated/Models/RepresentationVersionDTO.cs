//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// RepresentationVersionDTO model
    /// </summary>
    [Preserve]
    [DataContract(Name = "RepresentationVersionDTO")]
    internal class RepresentationVersionDTO
    {
        /// <summary>
        /// Creates an instance of RepresentationVersionDTO.
        /// </summary>
        /// <param name="id">id param</param>
        /// <param name="md5Hash">md5Hash param</param>
        /// <param name="representationId">representationId param</param>
        /// <param name="createdAt">createdAt param</param>
        /// <param name="updatedAt">updatedAt param</param>
        /// <param name="uploadStatus">uploadStatus param</param>
        /// <param name="size">size param</param>
        /// <param name="deletedAt">deletedAt param</param>
        [Preserve]
        public RepresentationVersionDTO(string id, string md5Hash, string representationId, DateTime createdAt, DateTime updatedAt, ContentUploadStatus uploadStatus, long? size = default, DateTime? deletedAt = default)
        {
            Id = id;
            Md5Hash = md5Hash;
            Size = size;
            RepresentationId = representationId;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            DeletedAt = deletedAt;
            UploadStatus = uploadStatus;
        }

        /// <summary>
        /// Parameter id of RepresentationVersionDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id{ get; }
        
        /// <summary>
        /// Parameter md5Hash of RepresentationVersionDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "md5Hash", IsRequired = true, EmitDefaultValue = true)]
        public string Md5Hash{ get; }
        
        /// <summary>
        /// Parameter size of RepresentationVersionDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public long? Size{ get; }
        
        /// <summary>
        /// Parameter representationId of RepresentationVersionDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "representationId", IsRequired = true, EmitDefaultValue = true)]
        public string RepresentationId{ get; }
        
        /// <summary>
        /// Parameter createdAt of RepresentationVersionDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt{ get; }
        
        /// <summary>
        /// Parameter updatedAt of RepresentationVersionDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt{ get; }
        
        /// <summary>
        /// Parameter deletedAt of RepresentationVersionDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "deletedAt", EmitDefaultValue = false)]
        public DateTime? DeletedAt{ get; }
        
        /// <summary>
        /// Parameter uploadStatus of RepresentationVersionDTO
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "uploadStatus", IsRequired = true, EmitDefaultValue = true)]
        public ContentUploadStatus UploadStatus{ get; }
    
        /// <summary>
        /// Formats a RepresentationVersionDTO into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Id != null)
            {
                serializedModel += "id," + Id + ",";
            }
            if (Md5Hash != null)
            {
                serializedModel += "md5Hash," + Md5Hash + ",";
            }
            if (Size != null)
            {
                serializedModel += "size," + Size.ToString() + ",";
            }
            if (RepresentationId != null)
            {
                serializedModel += "representationId," + RepresentationId + ",";
            }
            if (CreatedAt != null)
            {
                serializedModel += "createdAt," + CreatedAt.ToString() + ",";
            }
            if (UpdatedAt != null)
            {
                serializedModel += "updatedAt," + UpdatedAt.ToString() + ",";
            }
            if (DeletedAt != null)
            {
                serializedModel += "deletedAt," + DeletedAt.ToString() + ",";
            }
            serializedModel += "uploadStatus," + UploadStatus.ToString();
            return serializedModel;
        }

        /// <summary>
        /// Returns a RepresentationVersionDTO as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Id != null)
            {
                var idStringValue = Id.ToString();
                dictionary.Add("id", idStringValue);
            }
            
            if (Md5Hash != null)
            {
                var md5HashStringValue = Md5Hash.ToString();
                dictionary.Add("md5Hash", md5HashStringValue);
            }
            
            if (Size != null)
            {
                var sizeStringValue = Size.ToString();
                dictionary.Add("size", sizeStringValue);
            }
            
            if (RepresentationId != null)
            {
                var representationIdStringValue = RepresentationId.ToString();
                dictionary.Add("representationId", representationIdStringValue);
            }
            
            if (CreatedAt != null)
            {
                var createdAtStringValue = CreatedAt.ToString();
                dictionary.Add("createdAt", createdAtStringValue);
            }
            
            if (UpdatedAt != null)
            {
                var updatedAtStringValue = UpdatedAt.ToString();
                dictionary.Add("updatedAt", updatedAtStringValue);
            }
            
            if (DeletedAt != null)
            {
                var deletedAtStringValue = DeletedAt.ToString();
                dictionary.Add("deletedAt", deletedAtStringValue);
            }
            
            var uploadStatusStringValue = UploadStatus.ToString();
            dictionary.Add("uploadStatus", uploadStatusStringValue);
            
            return dictionary;
        }
    }
}
