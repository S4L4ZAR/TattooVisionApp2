//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// Response for getting content user rating info
    /// </summary>
    [Preserve]
    [DataContract(Name = "ContentUserRatingDTO")]
    internal class ContentUserRatingDTO
    {
        /// <summary>
        /// Response for getting content user rating info
        /// </summary>
        /// <param name="id">Id of content rating</param>
        /// <param name="userId">Id of user providing rating</param>
        /// <param name="contentId">Content the rating applies to</param>
        /// <param name="createdAt">Date rating was first created</param>
        /// <param name="updatedAt">Date rating was updated</param>
        /// <param name="rating">User rating</param>
        [Preserve]
        public ContentUserRatingDTO(string id, string userId, string contentId, DateTime createdAt = default, DateTime updatedAt = default, float rating = default)
        {
            Id = id;
            UserId = userId;
            ContentId = contentId;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            Rating = rating;
        }

        /// <summary>
        /// Id of content rating
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id{ get; }
        
        /// <summary>
        /// Id of user providing rating
        /// </summary>
        [Preserve]
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId{ get; }
        
        /// <summary>
        /// Content the rating applies to
        /// </summary>
        [Preserve]
        [DataMember(Name = "contentId", IsRequired = true, EmitDefaultValue = true)]
        public string ContentId{ get; }
        
        /// <summary>
        /// Date rating was first created
        /// </summary>
        [Preserve]
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt{ get; }
        
        /// <summary>
        /// Date rating was updated
        /// </summary>
        [Preserve]
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt{ get; }
        
        /// <summary>
        /// User rating
        /// </summary>
        [Preserve]
        [DataMember(Name = "rating", EmitDefaultValue = false)]
        public float Rating{ get; }
    
        /// <summary>
        /// Formats a ContentUserRatingDTO into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Id != null)
            {
                serializedModel += "id," + Id + ",";
            }
            if (UserId != null)
            {
                serializedModel += "userId," + UserId + ",";
            }
            if (ContentId != null)
            {
                serializedModel += "contentId," + ContentId + ",";
            }
            if (CreatedAt != null)
            {
                serializedModel += "createdAt," + CreatedAt.ToString() + ",";
            }
            if (UpdatedAt != null)
            {
                serializedModel += "updatedAt," + UpdatedAt.ToString() + ",";
            }
            serializedModel += "rating," + Rating.ToString();
            return serializedModel;
        }

        /// <summary>
        /// Returns a ContentUserRatingDTO as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Id != null)
            {
                var idStringValue = Id.ToString();
                dictionary.Add("id", idStringValue);
            }
            
            if (UserId != null)
            {
                var userIdStringValue = UserId.ToString();
                dictionary.Add("userId", userIdStringValue);
            }
            
            if (ContentId != null)
            {
                var contentIdStringValue = ContentId.ToString();
                dictionary.Add("contentId", contentIdStringValue);
            }
            
            if (CreatedAt != null)
            {
                var createdAtStringValue = CreatedAt.ToString();
                dictionary.Add("createdAt", createdAtStringValue);
            }
            
            if (UpdatedAt != null)
            {
                var updatedAtStringValue = UpdatedAt.ToString();
                dictionary.Add("updatedAt", updatedAtStringValue);
            }
            
            var ratingStringValue = Rating.ToString();
            dictionary.Add("rating", ratingStringValue);
            
            return dictionary;
        }
    }
}
