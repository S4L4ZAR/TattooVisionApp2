//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// Request for removing a ban on a player
    /// </summary>
    [Preserve]
    [DataContract(Name = "UnbanPlayerRequest")]
    internal class UnbanPlayerRequest
    {
        /// <summary>
        /// Request for removing a ban on a player
        /// </summary>
        /// <param name="playerId">The Player ID to unban</param>
        [Preserve]
        public UnbanPlayerRequest(string playerId)
        {
            PlayerId = playerId;
        }

        /// <summary>
        /// The Player ID to unban
        /// </summary>
        [Preserve]
        [DataMember(Name = "playerId", IsRequired = true, EmitDefaultValue = true)]
        public string PlayerId{ get; }
    
        /// <summary>
        /// Formats a UnbanPlayerRequest into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (PlayerId != null)
            {
                serializedModel += "playerId," + PlayerId;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a UnbanPlayerRequest as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (PlayerId != null)
            {
                var playerIdStringValue = PlayerId.ToString();
                dictionary.Add("playerId", playerIdStringValue);
            }
            
            return dictionary;
        }
    }
}
