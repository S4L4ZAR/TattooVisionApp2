//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// Response for getting tag info
    /// </summary>
    [Preserve]
    [DataContract(Name = "TagDTO")]
    internal class TagDTO
    {
        /// <summary>
        /// Response for getting tag info
        /// </summary>
        /// <param name="projectId">The project that the tag belongs to. If \&quot;global\&quot; then tag is un-editable/un-deletable and is shared  among all projects.</param>
        /// <param name="id">Tag item guid</param>
        /// <param name="name">Display name</param>
        /// <param name="environmentId">The environment that the tag belongs to.</param>
        [Preserve]
        public TagDTO(string projectId, string id = default, string name = default, string environmentId = default)
        {
            Id = id;
            Name = name;
            ProjectId = projectId;
            EnvironmentId = environmentId;
        }

        /// <summary>
        /// Tag item guid
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id{ get; }
        
        /// <summary>
        /// Display name
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name{ get; }
        
        /// <summary>
        /// The project that the tag belongs to. If \&quot;global\&quot; then tag is un-editable/un-deletable and is shared  among all projects.
        /// </summary>
        [Preserve]
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId{ get; }
        
        /// <summary>
        /// The environment that the tag belongs to.
        /// </summary>
        [Preserve]
        [DataMember(Name = "environmentId", EmitDefaultValue = false)]
        public string EnvironmentId{ get; }
    
        /// <summary>
        /// Formats a TagDTO into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Id != null)
            {
                serializedModel += "id," + Id + ",";
            }
            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            if (ProjectId != null)
            {
                serializedModel += "projectId," + ProjectId + ",";
            }
            if (EnvironmentId != null)
            {
                serializedModel += "environmentId," + EnvironmentId;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a TagDTO as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Id != null)
            {
                var idStringValue = Id.ToString();
                dictionary.Add("id", idStringValue);
            }
            
            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }
            
            if (ProjectId != null)
            {
                var projectIdStringValue = ProjectId.ToString();
                dictionary.Add("projectId", projectIdStringValue);
            }
            
            if (EnvironmentId != null)
            {
                var environmentIdStringValue = EnvironmentId.ToString();
                dictionary.Add("environmentId", environmentIdStringValue);
            }
            
            return dictionary;
        }
    }
}
