//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// Response for project
    /// </summary>
    [Preserve]
    [DataContract(Name = "ProjectDTO")]
    internal class ProjectDTO
    {
        /// <summary>
        /// Response for project
        /// </summary>
        /// <param name="id">Project item guid</param>
        /// <param name="appleClientId">Apple Authentication Provider Client ID</param>
        /// <param name="facebookClientId">Facebook Authentication Provider Client ID</param>
        /// <param name="googleClientId">Google Authentication Provider Client ID</param>
        /// <param name="steamAppId">Steam Authentication Provider Application ID</param>
        /// <param name="steamApiKey">Steam Authentication Provider API Key</param>
        /// <param name="firebaseAuth">firebaseAuth param</param>
        /// <param name="appleAppStoreUrl">Link to Apple App Store to download game</param>
        /// <param name="googlePlayStoreUrl">Link to Google Play Store to download game</param>
        /// <param name="gogStoreUrl">Link to Gog Store to download game</param>
        /// <param name="playstationStoreUrl">Link to Playstation Store to download game</param>
        /// <param name="xboxStoreUrl">Link to Xbox Store to download game</param>
        /// <param name="itchStoreUrl">Link to Itch Store to download game</param>
        /// <param name="epicGamesStoreUrl">Link to Epic Games Store to download game</param>
        /// <param name="steamStoreUrl">Link to Steam Store to download game</param>
        /// <param name="magicLeapStoreUrl">Link to Magic Leap Store to download game</param>
        /// <param name="oculusStoreUrl">Link to Oculus Quest Store to download game</param>
        /// <param name="creatorToolUrl">Link to custom Creator Tool</param>
        /// <param name="moderationGuidance">moderationGuidance param</param>
        /// <param name="name">Display name</param>
        /// <param name="description">Description of the project</param>
        /// <param name="threshold">The amount of flags required to hide content in this project</param>
        /// <param name="reviewRule">reviewRule param</param>
        /// <param name="thumbnailUrl">Image url for thumbnail</param>
        /// <param name="iconUrl">Icon url from upstream</param>
        /// <param name="enabled">If this project is enabled it will be publicly visible in the UGC Portal</param>
        /// <param name="createdAt">Date project was created</param>
        /// <param name="updatedAt">Date project was last updated</param>
        /// <param name="archivedAt">Date project was archived upstream</param>
        /// <param name="deletedAt">Date project was soft deleted</param>
        /// <param name="isDeletionPermanent">Flag for Project to allow hard deletion of Content and associated entities.  If set to true for the project, any content deletion is permanent. If set to false, soft deletion will occur instead.</param>
        /// <param name="useUgcCdn">Decides if CDN download links are returned</param>
        [Preserve]
        public ProjectDTO(string id, string appleClientId, string facebookClientId, string googleClientId, string steamAppId, string steamApiKey, FirebaseAuthData firebaseAuth, string appleAppStoreUrl, string googlePlayStoreUrl, string gogStoreUrl, string playstationStoreUrl, string xboxStoreUrl, string itchStoreUrl, string epicGamesStoreUrl, string steamStoreUrl, string magicLeapStoreUrl, string oculusStoreUrl, string creatorToolUrl, string moderationGuidance, string name = default, string description = default, int threshold = default, ProjectReviewRule reviewRule = default, string thumbnailUrl = default, string iconUrl = default, bool enabled = default, DateTime createdAt = default, DateTime updatedAt = default, DateTime? archivedAt = default, DateTime? deletedAt = default, bool isDeletionPermanent = default, bool useUgcCdn = default)
        {
            Id = id;
            Name = name;
            Description = description;
            Threshold = threshold;
            ReviewRule = reviewRule;
            ThumbnailUrl = thumbnailUrl;
            IconUrl = iconUrl;
            AppleClientId = appleClientId;
            FacebookClientId = facebookClientId;
            GoogleClientId = googleClientId;
            SteamAppId = steamAppId;
            SteamApiKey = steamApiKey;
            FirebaseAuth = firebaseAuth;
            AppleAppStoreUrl = appleAppStoreUrl;
            GooglePlayStoreUrl = googlePlayStoreUrl;
            GogStoreUrl = gogStoreUrl;
            PlaystationStoreUrl = playstationStoreUrl;
            XboxStoreUrl = xboxStoreUrl;
            ItchStoreUrl = itchStoreUrl;
            EpicGamesStoreUrl = epicGamesStoreUrl;
            SteamStoreUrl = steamStoreUrl;
            MagicLeapStoreUrl = magicLeapStoreUrl;
            OculusStoreUrl = oculusStoreUrl;
            CreatorToolUrl = creatorToolUrl;
            Enabled = enabled;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            ArchivedAt = archivedAt;
            DeletedAt = deletedAt;
            IsDeletionPermanent = isDeletionPermanent;
            UseUgcCdn = useUgcCdn;
            ModerationGuidance = moderationGuidance;
        }

        /// <summary>
        /// Project item guid
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id{ get; }
        
        /// <summary>
        /// Display name
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name{ get; }
        
        /// <summary>
        /// Description of the project
        /// </summary>
        [Preserve]
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description{ get; }
        
        /// <summary>
        /// The amount of flags required to hide content in this project
        /// </summary>
        [Preserve]
        [DataMember(Name = "threshold", EmitDefaultValue = false)]
        public int Threshold{ get; }
        
        /// <summary>
        /// Parameter reviewRule of ProjectDTO
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "reviewRule", EmitDefaultValue = false)]
        public ProjectReviewRule ReviewRule{ get; }
        
        /// <summary>
        /// Image url for thumbnail
        /// </summary>
        [Preserve]
        [DataMember(Name = "thumbnailUrl", EmitDefaultValue = false)]
        public string ThumbnailUrl{ get; }
        
        /// <summary>
        /// Icon url from upstream
        /// </summary>
        [Preserve]
        [DataMember(Name = "iconUrl", EmitDefaultValue = false)]
        public string IconUrl{ get; }
        
        /// <summary>
        /// Apple Authentication Provider Client ID
        /// </summary>
        [Preserve]
        [DataMember(Name = "appleClientId", IsRequired = true, EmitDefaultValue = true)]
        public string AppleClientId{ get; }
        
        /// <summary>
        /// Facebook Authentication Provider Client ID
        /// </summary>
        [Preserve]
        [DataMember(Name = "facebookClientId", IsRequired = true, EmitDefaultValue = true)]
        public string FacebookClientId{ get; }
        
        /// <summary>
        /// Google Authentication Provider Client ID
        /// </summary>
        [Preserve]
        [DataMember(Name = "googleClientId", IsRequired = true, EmitDefaultValue = true)]
        public string GoogleClientId{ get; }
        
        /// <summary>
        /// Steam Authentication Provider Application ID
        /// </summary>
        [Preserve]
        [DataMember(Name = "steamAppId", IsRequired = true, EmitDefaultValue = true)]
        public string SteamAppId{ get; }
        
        /// <summary>
        /// Steam Authentication Provider API Key
        /// </summary>
        [Preserve]
        [DataMember(Name = "steamApiKey", IsRequired = true, EmitDefaultValue = true)]
        public string SteamApiKey{ get; }
        
        /// <summary>
        /// Parameter firebaseAuth of ProjectDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "firebaseAuth", IsRequired = true, EmitDefaultValue = true)]
        public FirebaseAuthData FirebaseAuth{ get; }
        
        /// <summary>
        /// Link to Apple App Store to download game
        /// </summary>
        [Preserve]
        [DataMember(Name = "appleAppStoreUrl", IsRequired = true, EmitDefaultValue = true)]
        public string AppleAppStoreUrl{ get; }
        
        /// <summary>
        /// Link to Google Play Store to download game
        /// </summary>
        [Preserve]
        [DataMember(Name = "googlePlayStoreUrl", IsRequired = true, EmitDefaultValue = true)]
        public string GooglePlayStoreUrl{ get; }
        
        /// <summary>
        /// Link to Gog Store to download game
        /// </summary>
        [Preserve]
        [DataMember(Name = "gogStoreUrl", IsRequired = true, EmitDefaultValue = true)]
        public string GogStoreUrl{ get; }
        
        /// <summary>
        /// Link to Playstation Store to download game
        /// </summary>
        [Preserve]
        [DataMember(Name = "playstationStoreUrl", IsRequired = true, EmitDefaultValue = true)]
        public string PlaystationStoreUrl{ get; }
        
        /// <summary>
        /// Link to Xbox Store to download game
        /// </summary>
        [Preserve]
        [DataMember(Name = "xboxStoreUrl", IsRequired = true, EmitDefaultValue = true)]
        public string XboxStoreUrl{ get; }
        
        /// <summary>
        /// Link to Itch Store to download game
        /// </summary>
        [Preserve]
        [DataMember(Name = "itchStoreUrl", IsRequired = true, EmitDefaultValue = true)]
        public string ItchStoreUrl{ get; }
        
        /// <summary>
        /// Link to Epic Games Store to download game
        /// </summary>
        [Preserve]
        [DataMember(Name = "epicGamesStoreUrl", IsRequired = true, EmitDefaultValue = true)]
        public string EpicGamesStoreUrl{ get; }
        
        /// <summary>
        /// Link to Steam Store to download game
        /// </summary>
        [Preserve]
        [DataMember(Name = "steamStoreUrl", IsRequired = true, EmitDefaultValue = true)]
        public string SteamStoreUrl{ get; }
        
        /// <summary>
        /// Link to Magic Leap Store to download game
        /// </summary>
        [Preserve]
        [DataMember(Name = "magicLeapStoreUrl", IsRequired = true, EmitDefaultValue = true)]
        public string MagicLeapStoreUrl{ get; }
        
        /// <summary>
        /// Link to Oculus Quest Store to download game
        /// </summary>
        [Preserve]
        [DataMember(Name = "oculusStoreUrl", IsRequired = true, EmitDefaultValue = true)]
        public string OculusStoreUrl{ get; }
        
        /// <summary>
        /// Link to custom Creator Tool
        /// </summary>
        [Preserve]
        [DataMember(Name = "creatorToolUrl", IsRequired = true, EmitDefaultValue = true)]
        public string CreatorToolUrl{ get; }
        
        /// <summary>
        /// If this project is enabled it will be publicly visible in the UGC Portal
        /// </summary>
        [Preserve]
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled{ get; }
        
        /// <summary>
        /// Date project was created
        /// </summary>
        [Preserve]
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt{ get; }
        
        /// <summary>
        /// Date project was last updated
        /// </summary>
        [Preserve]
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt{ get; }
        
        /// <summary>
        /// Date project was archived upstream
        /// </summary>
        [Preserve]
        [DataMember(Name = "archivedAt", EmitDefaultValue = false)]
        public DateTime? ArchivedAt{ get; }
        
        /// <summary>
        /// Date project was soft deleted
        /// </summary>
        [Preserve]
        [DataMember(Name = "deletedAt", EmitDefaultValue = false)]
        public DateTime? DeletedAt{ get; }
        
        /// <summary>
        /// Flag for Project to allow hard deletion of Content and associated entities.  If set to true for the project, any content deletion is permanent. If set to false, soft deletion will occur instead.
        /// </summary>
        [Preserve]
        [DataMember(Name = "isDeletionPermanent", EmitDefaultValue = true)]
        public bool IsDeletionPermanent{ get; }
        
        /// <summary>
        /// Decides if CDN download links are returned
        /// </summary>
        [Preserve]
        [DataMember(Name = "useUgcCdn", EmitDefaultValue = true)]
        public bool UseUgcCdn{ get; }
        
        /// <summary>
        /// Parameter moderationGuidance of ProjectDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "moderationGuidance", IsRequired = true, EmitDefaultValue = true)]
        public string ModerationGuidance{ get; }
    
        /// <summary>
        /// Formats a ProjectDTO into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Id != null)
            {
                serializedModel += "id," + Id + ",";
            }
            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            if (Description != null)
            {
                serializedModel += "description," + Description + ",";
            }
            serializedModel += "threshold," + Threshold.ToString() + ",";
            serializedModel += "reviewRule," + ReviewRule.ToString() + ",";
            if (ThumbnailUrl != null)
            {
                serializedModel += "thumbnailUrl," + ThumbnailUrl + ",";
            }
            if (IconUrl != null)
            {
                serializedModel += "iconUrl," + IconUrl + ",";
            }
            if (AppleClientId != null)
            {
                serializedModel += "appleClientId," + AppleClientId + ",";
            }
            if (FacebookClientId != null)
            {
                serializedModel += "facebookClientId," + FacebookClientId + ",";
            }
            if (GoogleClientId != null)
            {
                serializedModel += "googleClientId," + GoogleClientId + ",";
            }
            if (SteamAppId != null)
            {
                serializedModel += "steamAppId," + SteamAppId + ",";
            }
            if (SteamApiKey != null)
            {
                serializedModel += "steamApiKey," + SteamApiKey + ",";
            }
            if (FirebaseAuth != null)
            {
                serializedModel += "firebaseAuth," + FirebaseAuth.ToString() + ",";
            }
            if (AppleAppStoreUrl != null)
            {
                serializedModel += "appleAppStoreUrl," + AppleAppStoreUrl + ",";
            }
            if (GooglePlayStoreUrl != null)
            {
                serializedModel += "googlePlayStoreUrl," + GooglePlayStoreUrl + ",";
            }
            if (GogStoreUrl != null)
            {
                serializedModel += "gogStoreUrl," + GogStoreUrl + ",";
            }
            if (PlaystationStoreUrl != null)
            {
                serializedModel += "playstationStoreUrl," + PlaystationStoreUrl + ",";
            }
            if (XboxStoreUrl != null)
            {
                serializedModel += "xboxStoreUrl," + XboxStoreUrl + ",";
            }
            if (ItchStoreUrl != null)
            {
                serializedModel += "itchStoreUrl," + ItchStoreUrl + ",";
            }
            if (EpicGamesStoreUrl != null)
            {
                serializedModel += "epicGamesStoreUrl," + EpicGamesStoreUrl + ",";
            }
            if (SteamStoreUrl != null)
            {
                serializedModel += "steamStoreUrl," + SteamStoreUrl + ",";
            }
            if (MagicLeapStoreUrl != null)
            {
                serializedModel += "magicLeapStoreUrl," + MagicLeapStoreUrl + ",";
            }
            if (OculusStoreUrl != null)
            {
                serializedModel += "oculusStoreUrl," + OculusStoreUrl + ",";
            }
            if (CreatorToolUrl != null)
            {
                serializedModel += "creatorToolUrl," + CreatorToolUrl + ",";
            }
            serializedModel += "enabled," + Enabled.ToString() + ",";
            if (CreatedAt != null)
            {
                serializedModel += "createdAt," + CreatedAt.ToString() + ",";
            }
            if (UpdatedAt != null)
            {
                serializedModel += "updatedAt," + UpdatedAt.ToString() + ",";
            }
            if (ArchivedAt != null)
            {
                serializedModel += "archivedAt," + ArchivedAt.ToString() + ",";
            }
            if (DeletedAt != null)
            {
                serializedModel += "deletedAt," + DeletedAt.ToString() + ",";
            }
            serializedModel += "isDeletionPermanent," + IsDeletionPermanent.ToString() + ",";
            serializedModel += "useUgcCdn," + UseUgcCdn.ToString() + ",";
            if (ModerationGuidance != null)
            {
                serializedModel += "moderationGuidance," + ModerationGuidance;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a ProjectDTO as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Id != null)
            {
                var idStringValue = Id.ToString();
                dictionary.Add("id", idStringValue);
            }
            
            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }
            
            if (Description != null)
            {
                var descriptionStringValue = Description.ToString();
                dictionary.Add("description", descriptionStringValue);
            }
            
            var thresholdStringValue = Threshold.ToString();
            dictionary.Add("threshold", thresholdStringValue);
            
            var reviewRuleStringValue = ReviewRule.ToString();
            dictionary.Add("reviewRule", reviewRuleStringValue);
            
            if (ThumbnailUrl != null)
            {
                var thumbnailUrlStringValue = ThumbnailUrl.ToString();
                dictionary.Add("thumbnailUrl", thumbnailUrlStringValue);
            }
            
            if (IconUrl != null)
            {
                var iconUrlStringValue = IconUrl.ToString();
                dictionary.Add("iconUrl", iconUrlStringValue);
            }
            
            if (AppleClientId != null)
            {
                var appleClientIdStringValue = AppleClientId.ToString();
                dictionary.Add("appleClientId", appleClientIdStringValue);
            }
            
            if (FacebookClientId != null)
            {
                var facebookClientIdStringValue = FacebookClientId.ToString();
                dictionary.Add("facebookClientId", facebookClientIdStringValue);
            }
            
            if (GoogleClientId != null)
            {
                var googleClientIdStringValue = GoogleClientId.ToString();
                dictionary.Add("googleClientId", googleClientIdStringValue);
            }
            
            if (SteamAppId != null)
            {
                var steamAppIdStringValue = SteamAppId.ToString();
                dictionary.Add("steamAppId", steamAppIdStringValue);
            }
            
            if (SteamApiKey != null)
            {
                var steamApiKeyStringValue = SteamApiKey.ToString();
                dictionary.Add("steamApiKey", steamApiKeyStringValue);
            }
            
            if (AppleAppStoreUrl != null)
            {
                var appleAppStoreUrlStringValue = AppleAppStoreUrl.ToString();
                dictionary.Add("appleAppStoreUrl", appleAppStoreUrlStringValue);
            }
            
            if (GooglePlayStoreUrl != null)
            {
                var googlePlayStoreUrlStringValue = GooglePlayStoreUrl.ToString();
                dictionary.Add("googlePlayStoreUrl", googlePlayStoreUrlStringValue);
            }
            
            if (GogStoreUrl != null)
            {
                var gogStoreUrlStringValue = GogStoreUrl.ToString();
                dictionary.Add("gogStoreUrl", gogStoreUrlStringValue);
            }
            
            if (PlaystationStoreUrl != null)
            {
                var playstationStoreUrlStringValue = PlaystationStoreUrl.ToString();
                dictionary.Add("playstationStoreUrl", playstationStoreUrlStringValue);
            }
            
            if (XboxStoreUrl != null)
            {
                var xboxStoreUrlStringValue = XboxStoreUrl.ToString();
                dictionary.Add("xboxStoreUrl", xboxStoreUrlStringValue);
            }
            
            if (ItchStoreUrl != null)
            {
                var itchStoreUrlStringValue = ItchStoreUrl.ToString();
                dictionary.Add("itchStoreUrl", itchStoreUrlStringValue);
            }
            
            if (EpicGamesStoreUrl != null)
            {
                var epicGamesStoreUrlStringValue = EpicGamesStoreUrl.ToString();
                dictionary.Add("epicGamesStoreUrl", epicGamesStoreUrlStringValue);
            }
            
            if (SteamStoreUrl != null)
            {
                var steamStoreUrlStringValue = SteamStoreUrl.ToString();
                dictionary.Add("steamStoreUrl", steamStoreUrlStringValue);
            }
            
            if (MagicLeapStoreUrl != null)
            {
                var magicLeapStoreUrlStringValue = MagicLeapStoreUrl.ToString();
                dictionary.Add("magicLeapStoreUrl", magicLeapStoreUrlStringValue);
            }
            
            if (OculusStoreUrl != null)
            {
                var oculusStoreUrlStringValue = OculusStoreUrl.ToString();
                dictionary.Add("oculusStoreUrl", oculusStoreUrlStringValue);
            }
            
            if (CreatorToolUrl != null)
            {
                var creatorToolUrlStringValue = CreatorToolUrl.ToString();
                dictionary.Add("creatorToolUrl", creatorToolUrlStringValue);
            }
            
            var enabledStringValue = Enabled.ToString();
            dictionary.Add("enabled", enabledStringValue);
            
            if (CreatedAt != null)
            {
                var createdAtStringValue = CreatedAt.ToString();
                dictionary.Add("createdAt", createdAtStringValue);
            }
            
            if (UpdatedAt != null)
            {
                var updatedAtStringValue = UpdatedAt.ToString();
                dictionary.Add("updatedAt", updatedAtStringValue);
            }
            
            if (ArchivedAt != null)
            {
                var archivedAtStringValue = ArchivedAt.ToString();
                dictionary.Add("archivedAt", archivedAtStringValue);
            }
            
            if (DeletedAt != null)
            {
                var deletedAtStringValue = DeletedAt.ToString();
                dictionary.Add("deletedAt", deletedAtStringValue);
            }
            
            var isDeletionPermanentStringValue = IsDeletionPermanent.ToString();
            dictionary.Add("isDeletionPermanent", isDeletionPermanentStringValue);
            
            var useUgcCdnStringValue = UseUgcCdn.ToString();
            dictionary.Add("useUgcCdn", useUgcCdnStringValue);
            
            if (ModerationGuidance != null)
            {
                var moderationGuidanceStringValue = ModerationGuidance.ToString();
                dictionary.Add("moderationGuidance", moderationGuidanceStringValue);
            }
            
            return dictionary;
        }
    }
}
