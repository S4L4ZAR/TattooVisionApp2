//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// RepresentationDTO model
    /// </summary>
    [Preserve]
    [DataContract(Name = "RepresentationDTO")]
    internal class RepresentationDTO
    {
        /// <summary>
        /// Creates an instance of RepresentationDTO.
        /// </summary>
        /// <param name="id">id param</param>
        /// <param name="contentId">contentId param</param>
        /// <param name="tags">tags param</param>
        /// <param name="createdAt">createdAt param</param>
        /// <param name="updatedAt">updatedAt param</param>
        /// <param name="currentVersion">currentVersion param</param>
        /// <param name="downloadUrl">downloadUrl param</param>
        /// <param name="md5Hash">md5Hash param</param>
        /// <param name="deletedAt">deletedAt param</param>
        /// <param name="metadata">metadata param</param>
        /// <param name="webhookEventName">webhookEventName param</param>
        [Preserve]
        public RepresentationDTO(string id, string contentId, List<RepresentationTagDTO> tags, DateTime createdAt, DateTime updatedAt, string currentVersion = default, string downloadUrl = default, string md5Hash = default, DateTime? deletedAt = default, string metadata = default, string webhookEventName = default)
        {
            Id = id;
            ContentId = contentId;
            CurrentVersion = currentVersion;
            DownloadUrl = downloadUrl;
            Md5Hash = md5Hash;
            Tags = tags;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            DeletedAt = deletedAt;
            Metadata = metadata;
            WebhookEventName = webhookEventName;
        }

        /// <summary>
        /// Parameter id of RepresentationDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id{ get; }
        
        /// <summary>
        /// Parameter contentId of RepresentationDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "contentId", IsRequired = true, EmitDefaultValue = true)]
        public string ContentId{ get; }
        
        /// <summary>
        /// Parameter currentVersion of RepresentationDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "currentVersion", EmitDefaultValue = false)]
        public string CurrentVersion{ get; }
        
        /// <summary>
        /// Parameter downloadUrl of RepresentationDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "downloadUrl", EmitDefaultValue = false)]
        public string DownloadUrl{ get; }
        
        /// <summary>
        /// Parameter md5Hash of RepresentationDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "md5Hash", EmitDefaultValue = false)]
        public string Md5Hash{ get; }
        
        /// <summary>
        /// Parameter tags of RepresentationDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public List<RepresentationTagDTO> Tags{ get; }
        
        /// <summary>
        /// Parameter createdAt of RepresentationDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt{ get; }
        
        /// <summary>
        /// Parameter updatedAt of RepresentationDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt{ get; }
        
        /// <summary>
        /// Parameter deletedAt of RepresentationDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "deletedAt", EmitDefaultValue = false)]
        public DateTime? DeletedAt{ get; }
        
        /// <summary>
        /// Parameter metadata of RepresentationDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata{ get; }
        
        /// <summary>
        /// Parameter webhookEventName of RepresentationDTO
        /// </summary>
        [Preserve]
        [DataMember(Name = "webhookEventName", EmitDefaultValue = false)]
        public string WebhookEventName{ get; }
    
        /// <summary>
        /// Formats a RepresentationDTO into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Id != null)
            {
                serializedModel += "id," + Id + ",";
            }
            if (ContentId != null)
            {
                serializedModel += "contentId," + ContentId + ",";
            }
            if (CurrentVersion != null)
            {
                serializedModel += "currentVersion," + CurrentVersion + ",";
            }
            if (DownloadUrl != null)
            {
                serializedModel += "downloadUrl," + DownloadUrl + ",";
            }
            if (Md5Hash != null)
            {
                serializedModel += "md5Hash," + Md5Hash + ",";
            }
            if (Tags != null)
            {
                serializedModel += "tags," + Tags.ToString() + ",";
            }
            if (CreatedAt != null)
            {
                serializedModel += "createdAt," + CreatedAt.ToString() + ",";
            }
            if (UpdatedAt != null)
            {
                serializedModel += "updatedAt," + UpdatedAt.ToString() + ",";
            }
            if (DeletedAt != null)
            {
                serializedModel += "deletedAt," + DeletedAt.ToString() + ",";
            }
            if (Metadata != null)
            {
                serializedModel += "metadata," + Metadata + ",";
            }
            if (WebhookEventName != null)
            {
                serializedModel += "webhookEventName," + WebhookEventName;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a RepresentationDTO as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Id != null)
            {
                var idStringValue = Id.ToString();
                dictionary.Add("id", idStringValue);
            }
            
            if (ContentId != null)
            {
                var contentIdStringValue = ContentId.ToString();
                dictionary.Add("contentId", contentIdStringValue);
            }
            
            if (CurrentVersion != null)
            {
                var currentVersionStringValue = CurrentVersion.ToString();
                dictionary.Add("currentVersion", currentVersionStringValue);
            }
            
            if (DownloadUrl != null)
            {
                var downloadUrlStringValue = DownloadUrl.ToString();
                dictionary.Add("downloadUrl", downloadUrlStringValue);
            }
            
            if (Md5Hash != null)
            {
                var md5HashStringValue = Md5Hash.ToString();
                dictionary.Add("md5Hash", md5HashStringValue);
            }
            
            if (CreatedAt != null)
            {
                var createdAtStringValue = CreatedAt.ToString();
                dictionary.Add("createdAt", createdAtStringValue);
            }
            
            if (UpdatedAt != null)
            {
                var updatedAtStringValue = UpdatedAt.ToString();
                dictionary.Add("updatedAt", updatedAtStringValue);
            }
            
            if (DeletedAt != null)
            {
                var deletedAtStringValue = DeletedAt.ToString();
                dictionary.Add("deletedAt", deletedAtStringValue);
            }
            
            if (Metadata != null)
            {
                var metadataStringValue = Metadata.ToString();
                dictionary.Add("metadata", metadataStringValue);
            }
            
            if (WebhookEventName != null)
            {
                var webhookEventNameStringValue = WebhookEventName.ToString();
                dictionary.Add("webhookEventName", webhookEventNameStringValue);
            }
            
            return dictionary;
        }
    }
}
