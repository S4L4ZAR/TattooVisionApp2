//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Ugc.Generated.Http;



namespace Unity.Services.Ugc.Generated.Models
{
    /// <summary>
    /// New content creation response
    /// </summary>
    [Preserve]
    [DataContract(Name = "UploadContentResponse")]
    internal class UploadContentResponse
    {
        /// <summary>
        /// New content creation response
        /// </summary>
        /// <param name="uploadThumbnailUrl">The URL in which to upload the content&#39;s thumbnail image</param>
        /// <param name="uploadContentUrl">The URL in which to upload the content.  Once the Content is successfully uploaded,  the Content will be created in UGC and the  OptimisticContentDTO can be used safely.</param>
        /// <param name="uploadContentHeaders">The headers that were used when generating the Content signed url.  Forward these when uploading to the UploadContentUrl</param>
        /// <param name="uploadThumbnailHeaders">The headers that were used when generating the Thumbnail signed url.  Forward these when uploading to the UploadThumbnailUrl</param>
        /// <param name="version">version param</param>
        /// <param name="content">content param</param>
        [Preserve]
        public UploadContentResponse(string uploadThumbnailUrl = default, string uploadContentUrl = default, Dictionary<string, List<string>> uploadContentHeaders = default, Dictionary<string, List<string>> uploadThumbnailHeaders = default, string version = default, ContentDTO content = default)
        {
            UploadThumbnailUrl = uploadThumbnailUrl;
            UploadContentUrl = uploadContentUrl;
            UploadContentHeaders = uploadContentHeaders;
            UploadThumbnailHeaders = uploadThumbnailHeaders;
            Version = version;
            Content = content;
        }

        /// <summary>
        /// The URL in which to upload the content&#39;s thumbnail image
        /// </summary>
        [Preserve]
        [DataMember(Name = "uploadThumbnailUrl", EmitDefaultValue = false)]
        public string UploadThumbnailUrl{ get; }
        
        /// <summary>
        /// The URL in which to upload the content.  Once the Content is successfully uploaded,  the Content will be created in UGC and the  OptimisticContentDTO can be used safely.
        /// </summary>
        [Preserve]
        [DataMember(Name = "uploadContentUrl", EmitDefaultValue = false)]
        public string UploadContentUrl{ get; }
        
        /// <summary>
        /// The headers that were used when generating the Content signed url.  Forward these when uploading to the UploadContentUrl
        /// </summary>
        [Preserve]
        [DataMember(Name = "uploadContentHeaders", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> UploadContentHeaders{ get; }
        
        /// <summary>
        /// The headers that were used when generating the Thumbnail signed url.  Forward these when uploading to the UploadThumbnailUrl
        /// </summary>
        [Preserve]
        [DataMember(Name = "uploadThumbnailHeaders", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> UploadThumbnailHeaders{ get; }
        
        /// <summary>
        /// Parameter version of UploadContentResponse
        /// </summary>
        [Preserve]
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string Version{ get; }
        
        /// <summary>
        /// Parameter content of UploadContentResponse
        /// </summary>
        [Preserve]
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public ContentDTO Content{ get; }
    
        /// <summary>
        /// Formats a UploadContentResponse into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (UploadThumbnailUrl != null)
            {
                serializedModel += "uploadThumbnailUrl," + UploadThumbnailUrl + ",";
            }
            if (UploadContentUrl != null)
            {
                serializedModel += "uploadContentUrl," + UploadContentUrl + ",";
            }
            if (UploadContentHeaders != null)
            {
                serializedModel += "uploadContentHeaders," + UploadContentHeaders.ToString() + ",";
            }
            if (UploadThumbnailHeaders != null)
            {
                serializedModel += "uploadThumbnailHeaders," + UploadThumbnailHeaders.ToString() + ",";
            }
            if (Version != null)
            {
                serializedModel += "version," + Version + ",";
            }
            if (Content != null)
            {
                serializedModel += "content," + Content.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a UploadContentResponse as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (UploadThumbnailUrl != null)
            {
                var uploadThumbnailUrlStringValue = UploadThumbnailUrl.ToString();
                dictionary.Add("uploadThumbnailUrl", uploadThumbnailUrlStringValue);
            }
            
            if (UploadContentUrl != null)
            {
                var uploadContentUrlStringValue = UploadContentUrl.ToString();
                dictionary.Add("uploadContentUrl", uploadContentUrlStringValue);
            }
            
            if (UploadContentHeaders != null)
            {
                var uploadContentHeadersStringValue = UploadContentHeaders.ToString();
                dictionary.Add("uploadContentHeaders", uploadContentHeadersStringValue);
            }
            
            if (UploadThumbnailHeaders != null)
            {
                var uploadThumbnailHeadersStringValue = UploadThumbnailHeaders.ToString();
                dictionary.Add("uploadThumbnailHeaders", uploadThumbnailHeadersStringValue);
            }
            
            if (Version != null)
            {
                var versionStringValue = Version.ToString();
                dictionary.Add("version", versionStringValue);
            }
            
            return dictionary;
        }
    }
}
