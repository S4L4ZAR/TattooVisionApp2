//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.Ugc.Generated.Models;
using Unity.Services.Ugc.Generated.Http;
using Unity.Services.Authentication.Internal;
using Unity.Services.Ugc.Generated.Subscription;

namespace Unity.Services.Ugc.Generated.Apis.Subscription
{
    /// <summary>
    /// Interface for the SubscriptionApiClient
    /// </summary>
    internal interface ISubscriptionApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Create a new subscription.
            /// </summary>
            /// <param name="request">Request object for CreateSubscription.</param>
            /// <param name="operationConfiguration">Configuration for CreateSubscription.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.SubscriptionDTO object.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.SubscriptionDTO>> CreateSubscriptionAsync(Unity.Services.Ugc.Generated.Subscription.CreateSubscriptionRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Deletes a subscription from the current user.
            /// </summary>
            /// <param name="request">Request object for DeleteSubscription.</param>
            /// <param name="operationConfiguration">Configuration for DeleteSubscription.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteSubscriptionAsync(Unity.Services.Ugc.Generated.Subscription.DeleteSubscriptionRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Check if a certain piece of content is subscribed by the current user.
            /// </summary>
            /// <param name="request">Request object for GetSubscription.</param>
            /// <param name="operationConfiguration">Configuration for GetSubscription.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.SubscriptionDTO object.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.SubscriptionDTO>> GetSubscriptionAsync(Unity.Services.Ugc.Generated.Subscription.GetSubscriptionRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Search the current users subscriptions.
            /// </summary>
            /// <param name="request">Request object for SearchSubscriptions.</param>
            /// <param name="operationConfiguration">Configuration for SearchSubscriptions.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.SubscriptionDTOPagedResult object.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.SubscriptionDTOPagedResult>> SearchSubscriptionsAsync(Unity.Services.Ugc.Generated.Subscription.SearchSubscriptionsRequest request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="ISubscriptionApiClient"/>
    internal class SubscriptionApiClient : BaseApiClient, ISubscriptionApiClient
    {
        private IAccessToken _accessToken;
        private const int _baseTimeout = 10;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://ugc.services.api.unity.com", 10, 4, null);
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
            set { _configuration = value; }
        }

        /// <summary>
        /// SubscriptionApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for SubscriptionApiClient.</param>
        /// <param name="accessToken">The Authentication token for the client.</param>
        /// <param name="configuration"> SubscriptionApiClient Configuration object.</param>
        public SubscriptionApiClient(IHttpClient httpClient,
            IAccessToken accessToken,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;

            _accessToken = accessToken;
        }


        /// <summary>
        /// Async Operation.
        /// Create a new subscription.
        /// </summary>
        /// <param name="request">Request object for CreateSubscription.</param>
        /// <param name="operationConfiguration">Configuration for CreateSubscription.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.SubscriptionDTO object.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.SubscriptionDTO>> CreateSubscriptionAsync(Unity.Services.Ugc.Generated.Subscription.CreateSubscriptionRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.SubscriptionDTO)   },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   },{"409", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.SubscriptionDTO>(response, statusCodeToTypeMap);
            return new Response<Models.SubscriptionDTO>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Deletes a subscription from the current user.
        /// </summary>
        /// <param name="request">Request object for DeleteSubscription.</param>
        /// <param name="operationConfiguration">Configuration for DeleteSubscription.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteSubscriptionAsync(Unity.Services.Ugc.Generated.Subscription.DeleteSubscriptionRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200",  null },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   },{"409", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Check if a certain piece of content is subscribed by the current user.
        /// </summary>
        /// <param name="request">Request object for GetSubscription.</param>
        /// <param name="operationConfiguration">Configuration for GetSubscription.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.SubscriptionDTO object.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.SubscriptionDTO>> GetSubscriptionAsync(Unity.Services.Ugc.Generated.Subscription.GetSubscriptionRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.SubscriptionDTO)   },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   },{"409", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.SubscriptionDTO>(response, statusCodeToTypeMap);
            return new Response<Models.SubscriptionDTO>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Search the current users subscriptions.
        /// </summary>
        /// <param name="request">Request object for SearchSubscriptions.</param>
        /// <param name="operationConfiguration">Configuration for SearchSubscriptions.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.SubscriptionDTOPagedResult object.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.SubscriptionDTOPagedResult>> SearchSubscriptionsAsync(Unity.Services.Ugc.Generated.Subscription.SearchSubscriptionsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.SubscriptionDTOPagedResult)   },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   },{"409", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.SubscriptionDTOPagedResult>(response, statusCodeToTypeMap);
            return new Response<Models.SubscriptionDTOPagedResult>(response, handledResponse);
        }

    }
}
