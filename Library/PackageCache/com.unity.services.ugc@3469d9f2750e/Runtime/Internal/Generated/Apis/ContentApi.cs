//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.Ugc.Generated.Models;
using Unity.Services.Ugc.Generated.Http;
using Unity.Services.Authentication.Internal;
using Unity.Services.Ugc.Generated.Content;

namespace Unity.Services.Ugc.Generated.Apis.Content
{
    /// <summary>
    /// Interface for the ContentApiClient
    /// </summary>
    internal interface IContentApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Create new content item.
            /// </summary>
            /// <param name="request">Request object for CreateContent.</param>
            /// <param name="operationConfiguration">Configuration for CreateContent.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.UploadContentResponse object.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.UploadContentResponse>> CreateContentAsync(Unity.Services.Ugc.Generated.Content.CreateContentRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Creates a new version of the content item asset and image.
            /// </summary>
            /// <param name="request">Request object for CreateContentVersion.</param>
            /// <param name="operationConfiguration">Configuration for CreateContentVersion.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.UploadContentResponse object.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.UploadContentResponse>> CreateContentVersionAsync(Unity.Services.Ugc.Generated.Content.CreateContentVersionRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Add a new user rating for content.
            /// </summary>
            /// <param name="request">Request object for CreateUserRating.</param>
            /// <param name="operationConfiguration">Configuration for CreateUserRating.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.ContentUserRatingDTO object.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.ContentUserRatingDTO>> CreateUserRatingAsync(Unity.Services.Ugc.Generated.Content.CreateUserRatingRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Soft delete a content item.
            /// </summary>
            /// <param name="request">Request object for DeleteContent.</param>
            /// <param name="operationConfiguration">Configuration for DeleteContent.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteContentAsync(Unity.Services.Ugc.Generated.Content.DeleteContentRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get details about a content item.
            /// </summary>
            /// <param name="request">Request object for GetContent.</param>
            /// <param name="operationConfiguration">Configuration for GetContent.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.ContentDTO object.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.ContentDTO>> GetContentAsync(Unity.Services.Ugc.Generated.Content.GetContentRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get content statistics.
            /// </summary>
            /// <param name="request">Request object for GetContentDownloads.</param>
            /// <param name="operationConfiguration">Configuration for GetContentDownloads.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.ContentDownloadStats object.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.ContentDownloadStats>> GetContentDownloadsAsync(Unity.Services.Ugc.Generated.Content.GetContentDownloadsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get content trends.
            /// </summary>
            /// <param name="request">Request object for GetContentTrendsList.</param>
            /// <param name="operationConfiguration">Configuration for GetContentTrendsList.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.ContentDTOPagedResult object.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.ContentDTOPagedResult>> GetContentTrendsListAsync(Unity.Services.Ugc.Generated.Content.GetContentTrendsListRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get content rating for user.
            /// </summary>
            /// <param name="request">Request object for GetUserRating.</param>
            /// <param name="operationConfiguration">Configuration for GetUserRating.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.ContentUserRatingDTO object.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.ContentUserRatingDTO>> GetUserRatingAsync(Unity.Services.Ugc.Generated.Content.GetUserRatingRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Search all content items in a given project and environment.
            /// </summary>
            /// <param name="request">Request object for SearchContent.</param>
            /// <param name="operationConfiguration">Configuration for SearchContent.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.ContentDTOPagedResult object.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.ContentDTOPagedResult>> SearchContentAsync(Unity.Services.Ugc.Generated.Content.SearchContentRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Search all player content items.
            /// </summary>
            /// <param name="request">Request object for SearchPlayerContent.</param>
            /// <param name="operationConfiguration">Configuration for SearchPlayerContent.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.ContentDTOPagedResult object.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.ContentDTOPagedResult>> SearchPlayerContentAsync(Unity.Services.Ugc.Generated.Content.SearchPlayerContentRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update content visibility.
            /// </summary>
            /// <param name="request">Request object for UpdateContentVisibility.</param>
            /// <param name="operationConfiguration">Configuration for UpdateContentVisibility.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.ContentDTO object.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.ContentDTO>> UpdateContentVisibilityAsync(Unity.Services.Ugc.Generated.Content.UpdateContentVisibilityRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update details about a content item.
            /// </summary>
            /// <param name="request">Request object for UpdateDetails.</param>
            /// <param name="operationConfiguration">Configuration for UpdateDetails.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.ContentDTO object.</returns>
            /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.ContentDTO>> UpdateDetailsAsync(Unity.Services.Ugc.Generated.Content.UpdateDetailsRequest request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="IContentApiClient"/>
    internal class ContentApiClient : BaseApiClient, IContentApiClient
    {
        private IAccessToken _accessToken;
        private const int _baseTimeout = 10;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://ugc.services.api.unity.com", 10, 4, null);
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
            set { _configuration = value; }
        }

        /// <summary>
        /// ContentApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for ContentApiClient.</param>
        /// <param name="accessToken">The Authentication token for the client.</param>
        /// <param name="configuration"> ContentApiClient Configuration object.</param>
        public ContentApiClient(IHttpClient httpClient,
            IAccessToken accessToken,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;

            _accessToken = accessToken;
        }


        /// <summary>
        /// Async Operation.
        /// Create new content item.
        /// </summary>
        /// <param name="request">Request object for CreateContent.</param>
        /// <param name="operationConfiguration">Configuration for CreateContent.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.UploadContentResponse object.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.UploadContentResponse>> CreateContentAsync(Unity.Services.Ugc.Generated.Content.CreateContentRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.UploadContentResponse)   },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.UploadContentResponse>(response, statusCodeToTypeMap);
            return new Response<Models.UploadContentResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Creates a new version of the content item asset and image.
        /// </summary>
        /// <param name="request">Request object for CreateContentVersion.</param>
        /// <param name="operationConfiguration">Configuration for CreateContentVersion.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.UploadContentResponse object.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.UploadContentResponse>> CreateContentVersionAsync(Unity.Services.Ugc.Generated.Content.CreateContentVersionRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.UploadContentResponse)   },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.UploadContentResponse>(response, statusCodeToTypeMap);
            return new Response<Models.UploadContentResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Add a new user rating for content.
        /// </summary>
        /// <param name="request">Request object for CreateUserRating.</param>
        /// <param name="operationConfiguration">Configuration for CreateUserRating.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.ContentUserRatingDTO object.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.ContentUserRatingDTO>> CreateUserRatingAsync(Unity.Services.Ugc.Generated.Content.CreateUserRatingRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.ContentUserRatingDTO)   },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.ContentUserRatingDTO>(response, statusCodeToTypeMap);
            return new Response<Models.ContentUserRatingDTO>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Soft delete a content item.
        /// </summary>
        /// <param name="request">Request object for DeleteContent.</param>
        /// <param name="operationConfiguration">Configuration for DeleteContent.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteContentAsync(Unity.Services.Ugc.Generated.Content.DeleteContentRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200",  null },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Get details about a content item.
        /// </summary>
        /// <param name="request">Request object for GetContent.</param>
        /// <param name="operationConfiguration">Configuration for GetContent.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.ContentDTO object.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.ContentDTO>> GetContentAsync(Unity.Services.Ugc.Generated.Content.GetContentRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.ContentDTO)   },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.ContentDTO>(response, statusCodeToTypeMap);
            return new Response<Models.ContentDTO>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get content statistics.
        /// </summary>
        /// <param name="request">Request object for GetContentDownloads.</param>
        /// <param name="operationConfiguration">Configuration for GetContentDownloads.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.ContentDownloadStats object.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.ContentDownloadStats>> GetContentDownloadsAsync(Unity.Services.Ugc.Generated.Content.GetContentDownloadsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.ContentDownloadStats)   },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.ContentDownloadStats>(response, statusCodeToTypeMap);
            return new Response<Models.ContentDownloadStats>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get content trends.
        /// </summary>
        /// <param name="request">Request object for GetContentTrendsList.</param>
        /// <param name="operationConfiguration">Configuration for GetContentTrendsList.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.ContentDTOPagedResult object.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.ContentDTOPagedResult>> GetContentTrendsListAsync(Unity.Services.Ugc.Generated.Content.GetContentTrendsListRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.ContentDTOPagedResult)   },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.ContentDTOPagedResult>(response, statusCodeToTypeMap);
            return new Response<Models.ContentDTOPagedResult>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get content rating for user.
        /// </summary>
        /// <param name="request">Request object for GetUserRating.</param>
        /// <param name="operationConfiguration">Configuration for GetUserRating.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.ContentUserRatingDTO object.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.ContentUserRatingDTO>> GetUserRatingAsync(Unity.Services.Ugc.Generated.Content.GetUserRatingRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.ContentUserRatingDTO)   },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.ContentUserRatingDTO>(response, statusCodeToTypeMap);
            return new Response<Models.ContentUserRatingDTO>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Search all content items in a given project and environment.
        /// </summary>
        /// <param name="request">Request object for SearchContent.</param>
        /// <param name="operationConfiguration">Configuration for SearchContent.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.ContentDTOPagedResult object.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.ContentDTOPagedResult>> SearchContentAsync(Unity.Services.Ugc.Generated.Content.SearchContentRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.ContentDTOPagedResult)   },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.ContentDTOPagedResult>(response, statusCodeToTypeMap);
            return new Response<Models.ContentDTOPagedResult>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Search all player content items.
        /// </summary>
        /// <param name="request">Request object for SearchPlayerContent.</param>
        /// <param name="operationConfiguration">Configuration for SearchPlayerContent.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.ContentDTOPagedResult object.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.ContentDTOPagedResult>> SearchPlayerContentAsync(Unity.Services.Ugc.Generated.Content.SearchPlayerContentRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.ContentDTOPagedResult)   },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.ContentDTOPagedResult>(response, statusCodeToTypeMap);
            return new Response<Models.ContentDTOPagedResult>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update content visibility.
        /// </summary>
        /// <param name="request">Request object for UpdateContentVisibility.</param>
        /// <param name="operationConfiguration">Configuration for UpdateContentVisibility.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.ContentDTO object.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.ContentDTO>> UpdateContentVisibilityAsync(Unity.Services.Ugc.Generated.Content.UpdateContentVisibilityRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.ContentDTO)   },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.ContentDTO>(response, statusCodeToTypeMap);
            return new Response<Models.ContentDTO>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update details about a content item.
        /// </summary>
        /// <param name="request">Request object for UpdateDetails.</param>
        /// <param name="operationConfiguration">Configuration for UpdateDetails.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.ContentDTO object.</returns>
        /// <exception cref="Unity.Services.Ugc.Generated.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.ContentDTO>> UpdateDetailsAsync(Unity.Services.Ugc.Generated.Content.UpdateDetailsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.ContentDTO)   },{"204",  null },{"400", typeof(Models.ApiErrorInfo)   },{"404", typeof(Models.ApiErrorInfo)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.ContentDTO>(response, statusCodeToTypeMap);
            return new Response<Models.ContentDTO>(response, handledResponse);
        }

    }
}
